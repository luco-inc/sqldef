// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const POSIX_REGEX = 57430
const POSIX_REGEX_CI = 57431
const POSIX_NOT_REGEX = 57432
const POSIX_NOT_REGEX_CI = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const MATERIALIZED = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const CONSTRAINT = 57461
const REFERENCES = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const FOREIGN = 57465
const KEY_BLOCK_SIZE = 57466
const POLICY = 57467
const WHILE = 57468
const UNIQUE = 57469
const KEY = 57470
const SHOW = 57471
const DESCRIBE = 57472
const EXPLAIN = 57473
const DATE = 57474
const ESCAPE = 57475
const REPAIR = 57476
const OPTIMIZE = 57477
const TRUNCATE = 57478
const MAXVALUE = 57479
const PARTITION = 57480
const REORGANIZE = 57481
const LESS = 57482
const THAN = 57483
const PROCEDURE = 57484
const TRIGGER = 57485
const TYPE = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const DEFERRABLE = 57520
const INITIALLY = 57521
const IMMEDIATE = 57522
const DEFERRED = 57523
const CONCURRENTLY = 57524
const BEGIN = 57525
const START = 57526
const TRANSACTION = 57527
const COMMIT = 57528
const ROLLBACK = 57529
const BIT = 57530
const TINYINT = 57531
const SMALLINT = 57532
const SMALLSERIAL = 57533
const MEDIUMINT = 57534
const INT = 57535
const INTEGER = 57536
const SERIAL = 57537
const BIGINT = 57538
const BIGSERIAL = 57539
const INTNUM = 57540
const REAL = 57541
const DOUBLE = 57542
const PRECISION = 57543
const FLOAT_TYPE = 57544
const DECIMAL = 57545
const NUMERIC = 57546
const SMALLMONEY = 57547
const MONEY = 57548
const TIME = 57549
const TIMESTAMP = 57550
const DATETIME = 57551
const YEAR = 57552
const DATETIMEOFFSET = 57553
const DATETIME2 = 57554
const SMALLDATETIME = 57555
const CHAR = 57556
const VARCHAR = 57557
const VARYING = 57558
const BOOL = 57559
const CHARACTER = 57560
const VARBINARY = 57561
const NCHAR = 57562
const NVARCHAR = 57563
const NTEXT = 57564
const UUID = 57565
const TEXT = 57566
const TINYTEXT = 57567
const MEDIUMTEXT = 57568
const LONGTEXT = 57569
const CITEXT = 57570
const BLOB = 57571
const TINYBLOB = 57572
const MEDIUMBLOB = 57573
const LONGBLOB = 57574
const JSON = 57575
const JSONB = 57576
const ENUM = 57577
const GEOMETRY = 57578
const POINT = 57579
const LINESTRING = 57580
const POLYGON = 57581
const GEOMETRYCOLLECTION = 57582
const MULTIPOINT = 57583
const MULTILINESTRING = 57584
const MULTIPOLYGON = 57585
const VARIADIC = 57586
const ARRAY = 57587
const NOW = 57588
const GETDATE = 57589
const BPCHAR = 57590
const TEXT_PATTERN_OPS = 57591
const NULLX = 57592
const AUTO_INCREMENT = 57593
const APPROXNUM = 57594
const SIGNED = 57595
const UNSIGNED = 57596
const ZEROFILL = 57597
const ZONE = 57598
const AUTOINCREMENT = 57599
const DATABASES = 57600
const TABLES = 57601
const VITESS_KEYSPACES = 57602
const VITESS_SHARDS = 57603
const VITESS_TABLETS = 57604
const VSCHEMA_TABLES = 57605
const EXTENDED = 57606
const FULL = 57607
const PROCESSLIST = 57608
const NAMES = 57609
const CHARSET = 57610
const GLOBAL = 57611
const SESSION = 57612
const ISOLATION = 57613
const LEVEL = 57614
const READ = 57615
const WRITE = 57616
const ONLY = 57617
const REPEATABLE = 57618
const COMMITTED = 57619
const UNCOMMITTED = 57620
const SERIALIZABLE = 57621
const NEW = 57622
const CURRENT_TIMESTAMP = 57623
const DATABASE = 57624
const CURRENT_DATE = 57625
const CURRENT_TIME = 57626
const LOCALTIME = 57627
const LOCALTIMESTAMP = 57628
const UTC_DATE = 57629
const UTC_TIME = 57630
const UTC_TIMESTAMP = 57631
const REPLACE = 57632
const CONVERT = 57633
const CAST = 57634
const SUBSTR = 57635
const SUBSTRING = 57636
const GROUP_CONCAT = 57637
const SEPARATOR = 57638
const INHERIT = 57639
const MATCH = 57640
const AGAINST = 57641
const BOOLEAN = 57642
const LANGUAGE = 57643
const WITH = 57644
const WITHOUT = 57645
const PARSER = 57646
const QUERY = 57647
const EXPANSION = 57648
const UNUSED = 57649
const VIRTUAL = 57650
const STORED = 57651
const GENERATED = 57652
const ALWAYS = 57653
const IDENTITY = 57654
const SEQUENCE = 57655
const INCREMENT = 57656
const MINVALUE = 57657
const CACHE = 57658
const CYCLE = 57659
const OWNED = 57660
const NONE = 57661
const CLUSTERED = 57662
const NONCLUSTERED = 57663
const REPLICATION = 57664
const INCLUDE = 57665
const HOLDLOCK = 57666
const NOLOCK = 57667
const NOWAIT = 57668
const PAGLOCK = 57669
const ROWLOCK = 57670
const TABLELOCK = 57671
const TYPECAST = 57672
const CHECK = 57673

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	130, 153,
	-2, 143,
	-1, 36,
	164, 492,
	165, 492,
	-2, 482,
	-1, 278,
	117, 850,
	-2, 846,
	-1, 279,
	117, 851,
	-2, 847,
	-1, 280,
	117, 852,
	-2, 239,
	-1, 321,
	262, 861,
	-2, 744,
	-1, 353,
	84, 1076,
	-2, 82,
	-1, 354,
	84, 1026,
	-2, 83,
	-1, 360,
	84, 1005,
	-2, 817,
	-1, 362,
	84, 1050,
	-2, 819,
	-1, 618,
	262, 861,
	-2, 520,
	-1, 667,
	262, 861,
	-2, 520,
	-1, 696,
	55, 41,
	57, 41,
	-2, 43,
	-1, 728,
	114, 1000,
	245, 1000,
	251, 1000,
	-2, 275,
	-1, 729,
	114, 1001,
	245, 1001,
	251, 1001,
	-2, 276,
	-1, 730,
	245, 1003,
	251, 1003,
	-2, 310,
	-1, 731,
	245, 1004,
	251, 1004,
	-2, 310,
	-1, 732,
	245, 1103,
	251, 1103,
	-2, 310,
	-1, 733,
	245, 1051,
	251, 1051,
	-2, 310,
	-1, 734,
	245, 1056,
	251, 1056,
	-2, 310,
	-1, 735,
	114, 1054,
	245, 1054,
	251, 1054,
	-2, 282,
	-1, 737,
	114, 1102,
	245, 1102,
	251, 1102,
	-2, 310,
	-1, 738,
	245, 1088,
	251, 1088,
	-2, 327,
	-1, 739,
	245, 1094,
	251, 1094,
	-2, 327,
	-1, 740,
	245, 1044,
	251, 1044,
	-2, 327,
	-1, 741,
	245, 1040,
	251, 1040,
	-2, 327,
	-1, 743,
	114, 999,
	245, 999,
	251, 999,
	-2, 291,
	-1, 744,
	114, 1092,
	245, 1092,
	251, 1092,
	-2, 292,
	-1, 745,
	114, 1042,
	245, 1042,
	251, 1042,
	-2, 293,
	-1, 746,
	114, 1039,
	245, 1039,
	251, 1039,
	-2, 294,
	-1, 747,
	114, 1031,
	245, 1031,
	251, 1031,
	-2, 295,
	-1, 749,
	114, 1101,
	245, 1101,
	251, 1101,
	-2, 297,
	-1, 752,
	114, 1012,
	245, 1012,
	251, 1012,
	-2, 267,
	-1, 753,
	114, 1090,
	245, 1090,
	251, 1090,
	-2, 310,
	-1, 754,
	114, 1091,
	245, 1091,
	251, 1091,
	-2, 310,
	-1, 755,
	114, 1013,
	245, 1013,
	251, 1013,
	-2, 310,
	-1, 756,
	114, 1014,
	245, 1014,
	251, 1014,
	-2, 271,
	-1, 757,
	114, 1015,
	245, 1015,
	251, 1015,
	-2, 310,
	-1, 758,
	114, 1081,
	245, 1081,
	251, 1081,
	-2, 273,
	-1, 759,
	114, 1115,
	245, 1115,
	251, 1115,
	-2, 274,
	-1, 760,
	114, 1023,
	245, 1023,
	251, 1023,
	-2, 300,
	-1, 761,
	114, 1060,
	245, 1060,
	251, 1060,
	-2, 301,
	-1, 762,
	114, 1038,
	245, 1038,
	251, 1038,
	-2, 302,
	-1, 763,
	114, 1061,
	245, 1061,
	251, 1061,
	-2, 303,
	-1, 764,
	114, 1024,
	245, 1024,
	251, 1024,
	-2, 304,
	-1, 765,
	114, 1048,
	245, 1048,
	251, 1048,
	-2, 305,
	-1, 766,
	114, 1047,
	245, 1047,
	251, 1047,
	-2, 306,
	-1, 767,
	114, 1049,
	245, 1049,
	251, 1049,
	-2, 307,
	-1, 768,
	114, 998,
	245, 998,
	251, 998,
	-2, 249,
	-1, 769,
	114, 1093,
	245, 1093,
	251, 1093,
	-2, 250,
	-1, 770,
	114, 1082,
	245, 1082,
	251, 1082,
	-2, 251,
	-1, 771,
	114, 1084,
	245, 1084,
	251, 1084,
	-2, 252,
	-1, 772,
	114, 1043,
	245, 1043,
	251, 1043,
	-2, 253,
	-1, 773,
	114, 1028,
	245, 1028,
	251, 1028,
	-2, 254,
	-1, 774,
	114, 1029,
	245, 1029,
	251, 1029,
	-2, 255,
	-1, 775,
	114, 1077,
	245, 1077,
	251, 1077,
	-2, 256,
	-1, 776,
	114, 996,
	245, 996,
	251, 996,
	-2, 257,
	-1, 777,
	114, 997,
	245, 997,
	251, 997,
	-2, 258,
	-1, 778,
	114, 1068,
	245, 1068,
	251, 1068,
	-2, 312,
	-1, 779,
	114, 1017,
	245, 1017,
	251, 1017,
	-2, 312,
	-1, 780,
	114, 1021,
	245, 1021,
	251, 1021,
	-2, 312,
	-1, 781,
	114, 1016,
	245, 1016,
	251, 1016,
	-2, 314,
	-1, 782,
	114, 1055,
	245, 1055,
	251, 1055,
	-2, 314,
	-1, 783,
	114, 1046,
	245, 1046,
	251, 1046,
	-2, 265,
	-1, 784,
	114, 1083,
	245, 1083,
	251, 1083,
	-2, 266,
	-1, 860,
	117, 854,
	-2, 849,
	-1, 1000,
	140, 395,
	-2, 1010,
	-1, 1121,
	262, 861,
	-2, 520,
	-1, 1143,
	5, 28,
	-2, 641,
	-1, 1169,
	5, 27,
	-2, 790,
	-1, 1218,
	59, 368,
	-2, 365,
	-1, 1235,
	117, 852,
	-2, 239,
	-1, 1464,
	5, 27,
	-2, 90,
	-1, 1465,
	5, 27,
	-2, 91,
	-1, 1524,
	5, 28,
	-2, 791,
	-1, 1632,
	5, 27,
	-2, 793,
	-1, 1710,
	58, 102,
	-2, 172,
	-1, 1713,
	58, 102,
	-2, 172,
	-1, 1781,
	187, 54,
	-2, 172,
	-1, 1797,
	58, 102,
	-2, 171,
	-1, 1817,
	5, 28,
	-2, 794,
	-1, 1972,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 20912

var yyAct = [...]int16{
	364, 1688, 1807, 719, 1924, 1738, 1647, 1066, 544, 1597,
	789, 1782, 1691, 1530, 1771, 1644, 1596, 1185, 1207, 1761,
	622, 621, 3, 284, 494, 948, 1796, 1172, 274, 1925,
	1534, 718, 1210, 1378, 311, 92, 1824, 1379, 92, 257,
	1409, 1557, 966, 295, 836, 53, 1547, 690, 283, 1233,
	1375, 1283, 1136, 1074, 995, 1075, 603, 1058, 251, 688,
	279, 1239, 92, 92, 1010, 989, 1350, 949, 918, 256,
	1190, 359, 885, 913, 1126, 92, 1132, 287, 66, 795,
	1177, 92, 1053, 92, 1268, 1005, 706, 936, 862, 92,
	986, 550, 692, 1714, 705, 352, 340, 945, 677, 726,
	564, 721, 252, 253, 254, 255, 282, 266, 720, 556,
	500, 21, 339, 916, 1108, 1346, 1024, 1025, 645, 1252,
	1031, 338, 1535, 1536, 1537, 1538, 1539, 1540, 270, 349,
	579, 580, 581, 582, 583, 584, 585, 578, 1028, 343,
	588, 1013, 912, 1951, 1416, 52, 263, 276, 48, 26,
	27, 1917, 1024, 604, 1436, 1020, 347, 1008, 1772, 491,
	1702, 578, 1563, 1009, 588, 1423, 588, 261, 495, 496,
	1908, 28, 1571, 1231, 1842, 1843, 1985, 1889, 1978, 1815,
	1743, 1515, 502, 572, 1422, 575, 1742, 507, 1133, 1134,
	1041, 590, 591, 592, 593, 594, 595, 596, 992, 573,
	574, 571, 597, 598, 599, 600, 577, 576, 586, 587,
	579, 580, 581, 582, 583, 584, 585, 578, 1901, 1963,
	588, 1016, 1067, 1011, 1021, 1860, 1027, 1186, 1729, 1129,
	92, 1018, 1017, 577, 576, 586, 587, 579, 580, 581,
	582, 583, 584, 585, 578, 1888, 1370, 588, 1814, 1839,
	531, 1518, 345, 508, 87, 83, 84, 1401, 85, 279,
	279, 577, 576, 586, 587, 579, 580, 581, 582, 583,
	584, 585, 578, 1708, 979, 588, 279, 581, 582, 583,
	584, 585, 578, 1707, 553, 588, 707, 89, 708, 279,
	279, 279, 279, 279, 279, 279, 586, 587, 579, 580,
	581, 582, 583, 584, 585, 578, 552, 539, 588, 1402,
	1403, 980, 981, 279, 355, 348, 1497, 827, 1496, 1254,
	1514, 543, 279, 1495, 828, 1030, 617, 505, 1703, 1704,
	1706, 1621, 1042, 510, 1705, 511, 1198, 1131, 92, 1197,
	1032, 518, 1199, 940, 543, 92, 92, 92, 1907, 1686,
	1909, 1032, 1507, 1344, 1677, 1014, 1343, 1342, 1417, 605,
	1054, 1015, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 589, 1505, 588, 495, 496, 250,
	1983, 1427, 1879, 1976, 1975, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 1959, 589, 588,
	589, 1960, 1930, 1922, 1777, 524, 1690, 1470, 1471, 1345,
	1511, 1787, 1663, 1512, 1022, 1244, 1023, 1246, 1245, 1762,
	535, 536, 343, 1977, 1961, 1808, 1322, 86, 946, 1614,
	797, 650, 797, 651, 1809, 1019, 609, 610, 611, 612,
	613, 614, 615, 1629, 1565, 1572, 1217, 49, 1564, 1215,
	1225, 1743, 1224, 1730, 589, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 796, 1560, 588,
	300, 1425, 1212, 526, 1415, 1900, 528, 542, 1938, 1487,
	703, 589, 520, 991, 1720, 1230, 1982, 501, 903, 1956,
	577, 576, 586, 587, 579, 580, 581, 582, 583, 584,
	585, 578, 57, 697, 588, 525, 527, 1042, 92, 589,
	92, 513, 81, 92, 1813, 1218, 92, 1035, 1006, 589,
	92, 1929, 1055, 1603, 80, 785, 81, 59, 60, 61,
	62, 63, 1007, 1319, 358, 1007, 492, 806, 967, 969,
	499, 92, 589, 503, 504, 576, 586, 587, 579, 580,
	581, 582, 583, 584, 585, 578, 1477, 498, 588, 1555,
	92, 1555, 279, 279, 1788, 1789, 1790, 1189, 497, 279,
	1188, 279, 1006, 1478, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 1007,
	672, 815, 839, 798, 799, 798, 799, 901, 1187, 696,
	786, 355, 509, 1558, 1559, 1561, 863, 900, 787, 788,
	589, 506, 229, 904, 82, 1323, 1967, 801, 968, 279,
	636, 1734, 905, 906, 1527, 279, 279, 279, 279, 279,
	279, 279, 279, 589, 813, 1444, 279, 902, 1320, 915,
	860, 1318, 1150, 607, 608, 523, 923, 1331, 1154, 864,
	1120, 834, 710, 928, 930, 1321, 620, 568, 519, 938,
	988, 987, 841, 1103, 1452, 831, 856, 279, 279, 279,
	279, 1327, 92, 563, 279, 92, 92, 92, 92, 92,
	1754, 1753, 1752, 858, 1751, 562, 561, 92, 1149, 891,
	92, 651, 1878, 1750, 92, 1973, 1148, 950, 888, 92,
	92, 561, 563, 589, 358, 358, 358, 358, 890, 358,
	279, 923, 1749, 1844, 907, 910, 358, 563, 861, 1453,
	1748, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 1974, 1746, 589, 924,
	925, 942, 934, 566, 1467, 933, 1104, 562, 561, 607,
	608, 1326, 343, 343, 343, 343, 343, 1971, 974, 1200,
	802, 1175, 803, 709, 563, 807, 554, 343, 810, 1372,
	937, 1209, 952, 953, 1665, 955, 343, 929, 792, 937,
	941, 1159, 943, 944, 963, 1662, 971, 951, 92, 92,
	954, 1661, 589, 829, 972, 92, 1209, 92, 976, 977,
	869, 1825, 92, 558, 1080, 92, 1147, 92, 1146, 1848,
	92, 993, 848, 1209, 867, 868, 866, 1208, 1902, 859,
	1826, 358, 1221, 1850, 1941, 562, 561, 50, 712, 1940,
	837, 838, 1906, 279, 279, 279, 279, 865, 1905, 1209,
	1060, 1584, 563, 833, 543, 1255, 1747, 279, 1110, 562,
	561, 1033, 1034, 1036, 1037, 1038, 1845, 1039, 1040, 1339,
	562, 561, 1056, 1057, 1903, 886, 563, 887, 279, 279,
	279, 919, 1904, 1220, 1049, 1050, 1051, 563, 1052, 562,
	561, 1827, 832, 577, 576, 586, 587, 579, 580, 581,
	582, 583, 584, 585, 578, 1764, 563, 588, 1823, 562,
	561, 863, 562, 561, 1583, 1255, 860, 1675, 1255, 1374,
	1592, 562, 561, 1591, 1432, 279, 563, 512, 1275, 563,
	1273, 1251, 279, 1628, 947, 1589, 1137, 1109, 563, 50,
	1043, 1044, 1045, 1046, 619, 279, 1489, 1269, 279, 1117,
	1118, 1119, 1227, 619, 864, 638, 639, 640, 641, 642,
	643, 644, 975, 355, 1060, 1122, 852, 854, 855, 79,
	1116, 985, 853, 725, 725, 1775, 1990, 1169, 1552, 1962,
	1636, 1948, 1648, 1744, 92, 1420, 1056, 1057, 1552, 1913,
	543, 358, 1552, 1896, 1912, 1650, 1846, 1847, 1849, 1851,
	1852, 1419, 358, 358, 358, 358, 358, 358, 358, 358,
	1192, 1418, 1194, 515, 516, 517, 358, 358, 1775, 1895,
	1892, 1891, 1884, 543, 1858, 1123, 1124, 1125, 1552, 1881,
	337, 1219, 92, 1158, 1201, 279, 843, 1069, 1139, 1552,
	1880, 840, 899, 1193, 812, 1182, 566, 811, 1226, 358,
	1064, 1065, 1636, 1805, 1636, 1672, 1795, 1073, 1156, 1079,
	793, 343, 1636, 543, 1081, 1639, 1638, 1098, 1649, 1099,
	1636, 1637, 1100, 92, 791, 1195, 1552, 1551, 1243, 1398,
	543, 1526, 543, 1241, 1459, 1458, 1455, 1456, 909, 909,
	1455, 1454, 1141, 543, 1768, 859, 911, 521, 1213, 1214,
	1216, 358, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 920,
	922, 931, 921, 543, 92, 92, 931, 679, 682, 683,
	684, 680, 92, 681, 685, 939, 514, 1178, 1179, 674,
	543, 700, 279, 717, 716, 1767, 1271, 1272, 279, 279,
	1766, 589, 1262, 1270, 1264, 1265, 1266, 1267, 1274, 23,
	1685, 1291, 279, 1776, 931, 1775, 1610, 1681, 1680, 1676,
	279, 279, 279, 279, 279, 279, 1258, 23, 1585, 1289,
	279, 1574, 1292, 1445, 1167, 701, 965, 699, 279, 1168,
	54, 1173, 1174, 358, 279, 279, 279, 1334, 673, 279,
	1288, 358, 279, 921, 23, 1174, 1648, 1631, 492, 50,
	50, 950, 1382, 1377, 1347, 1337, 1867, 950, 1338, 1650,
	1522, 279, 1371, 1380, 674, 1552, 1376, 50, 1287, 1173,
	1349, 1288, 1141, 674, 1153, 1363, 1408, 674, 1386, 1573,
	1362, 1400, 1466, 1141, 1256, 1257, 860, 1259, 1260, 1261,
	1173, 973, 1457, 699, 50, 279, 1646, 1204, 1399, 978,
	1203, 1387, 1385, 1141, 1421, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 1061, 702, 588,
	1152, 835, 358, 263, 358, 1594, 1593, 1979, 1886, 78,
	1407, 725, 1649, 1857, 1228, 1340, 1341, 92, 1243, 1770,
	1769, 358, 1758, 1241, 1433, 1426, 1757, 1424, 92, 1717,
	1716, 1687, 1435, 1674, 1615, 1437, 1127, 1364, 1365, 1366,
	1367, 1368, 1464, 1465, 1309, 358, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 50, 1612, 1278, 1443, 92, 1284, 1032,
	1059, 71, 76, 1462, 68, 1442, 1440, 1429, 279, 1393,
	1391, 1276, 1277, 1739, 1054, 92, 1232, 72, 1206, 77,
	279, 1178, 1179, 1474, 1473, 1048, 1047, 1446, 1447, 65,
	1449, 1450, 1451, 1480, 790, 73, 74, 69, 1290, 1763,
	1595, 1491, 1482, 1463, 1332, 1439, 1441, 1376, 1181, 809,
	794, 1336, 540, 1310, 847, 279, 1485, 1130, 1488, 1312,
	1305, 1306, 279, 1313, 1308, 1307, 1184, 960, 566, 1315,
	1311, 1138, 961, 1140, 1492, 1183, 957, 956, 92, 1498,
	1314, 1143, 1144, 1145, 1935, 1369, 1887, 1304, 1541, 1542,
	1543, 1155, 343, 1503, 1330, 962, 1161, 683, 684, 1162,
	1163, 1164, 1165, 1299, 267, 268, 1529, 1105, 1521, 279,
	679, 682, 683, 684, 680, 279, 681, 685, 557, 1546,
	1933, 1191, 1115, 1570, 1568, 1544, 958, 1567, 1114, 1448,
	1741, 959, 1205, 1406, 555, 1562, 545, 1263, 715, 522,
	358, 1431, 1520, 279, 92, 1923, 837, 838, 1071, 546,
	1616, 1211, 1500, 1501, 808, 1502, 1430, 1286, 1243, 1504,
	1281, 1506, 1222, 1241, 1575, 1280, 1605, 1494, 1606, 1607,
	1608, 800, 687, 589, 70, 1248, 264, 265, 1300, 1296,
	1293, 1604, 1301, 1298, 1297, 557, 1598, 1952, 77, 1609,
	1469, 1414, 279, 279, 1602, 279, 279, 279, 1601, 1302,
	75, 258, 1113, 1910, 1723, 259, 1295, 54, 1722, 1460,
	1112, 1553, 1556, 1619, 1279, 1174, 1875, 1874, 358, 1587,
	1472, 1076, 1077, 1078, 58, 1873, 1872, 1632, 1841, 1840,
	1413, 1412, 1755, 559, 1756, 1731, 1223, 1380, 830, 56,
	1630, 1697, 8, 1694, 7, 1695, 6, 279, 1294, 1484,
	1476, 358, 279, 1693, 5, 990, 1660, 1351, 1611, 698,
	51, 1664, 1336, 1, 1135, 616, 299, 1643, 1958, 1928,
	1668, 358, 285, 1658, 279, 1533, 92, 1666, 1659, 1868,
	1780, 1863, 1786, 1250, 1012, 1765, 1229, 67, 1859, 1774,
	1682, 1468, 1353, 1285, 1303, 1068, 1282, 1348, 1086, 1806,
	1820, 1645, 1554, 998, 1202, 358, 490, 64, 1745, 1718,
	999, 997, 996, 994, 1026, 1253, 1029, 1598, 931, 1709,
	1692, 1384, 1191, 724, 931, 1588, 722, 1590, 723, 727,
	237, 350, 1740, 686, 711, 1733, 1548, 560, 1203, 1622,
	1623, 1737, 1624, 1625, 1626, 1732, 1380, 1317, 1397, 1316,
	1736, 279, 1082, 358, 1325, 826, 1102, 1410, 538, 1678,
	239, 1679, 601, 1355, 1111, 1196, 357, 1360, 279, 1354,
	1383, 549, 1620, 1721, 1352, 1586, 1618, 1157, 633, 935,
	1358, 286, 851, 298, 1773, 1248, 297, 296, 279, 279,
	842, 1166, 570, 1356, 1357, 342, 1600, 1284, 1548, 670,
	1553, 1778, 1701, 279, 279, 678, 1803, 1804, 676, 675,
	1180, 1598, 279, 1359, 1361, 1176, 1791, 1794, 1798, 1799,
	1800, 1801, 1802, 341, 1811, 785, 1333, 1779, 1461, 1821,
	1517, 1728, 846, 25, 55, 950, 269, 1816, 19, 1835,
	18, 1475, 17, 20, 1479, 16, 1481, 15, 1836, 14,
	279, 29, 13, 12, 11, 1483, 10, 279, 9, 1837,
	1855, 1700, 1699, 1853, 1698, 1869, 1854, 1828, 1829, 1830,
	1831, 1832, 1696, 1486, 4, 312, 47, 1833, 1834, 1856,
	260, 22, 358, 1701, 2, 0, 0, 1864, 0, 0,
	0, 0, 0, 1598, 0, 1493, 1882, 0, 0, 1866,
	0, 1876, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 1509, 1510, 47, 0, 1513, 0, 0, 1684, 0,
	0, 262, 1893, 1894, 0, 1792, 0, 344, 1897, 1523,
	1524, 1525, 1531, 1528, 0, 1531, 1531, 1531, 0, 1545,
	0, 1915, 1914, 1916, 0, 1919, 358, 0, 358, 1920,
	0, 1911, 1898, 1899, 1927, 0, 0, 1932, 0, 1701,
	1931, 1926, 0, 0, 0, 1918, 1934, 0, 0, 1937,
	1531, 0, 0, 1701, 0, 1248, 0, 1576, 1692, 0,
	0, 92, 1939, 0, 0, 358, 1582, 0, 279, 0,
	1947, 0, 0, 0, 548, 1869, 0, 1944, 0, 1946,
	0, 0, 0, 1599, 0, 0, 0, 358, 358, 92,
	1945, 0, 0, 0, 1949, 1966, 0, 1613, 0, 0,
	1968, 0, 0, 0, 1955, 0, 1778, 1955, 1617, 90,
	0, 1969, 249, 0, 0, 1970, 0, 0, 0, 0,
	0, 0, 0, 0, 1972, 0, 1981, 1701, 0, 0,
	529, 1986, 0, 0, 273, 279, 90, 90, 1987, 1701,
	1701, 1701, 0, 0, 0, 1627, 0, 1634, 1635, 90,
	0, 0, 0, 0, 0, 90, 0, 90, 0, 0,
	0, 0, 0, 90, 272, 0, 0, 1955, 0, 1640,
	1641, 1642, 0, 1410, 0, 0, 0, 0, 0, 530,
	530, 530, 530, 0, 530, 1667, 1701, 0, 1701, 1701,
	0, 530, 0, 0, 0, 0, 0, 1671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 1599, 1683, 0, 0, 0, 0,
	0, 0, 0, 602, 1689, 0, 0, 606, 0, 0,
	0, 0, 0, 1710, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 1701, 618, 0, 0, 1701,
	1724, 1725, 1726, 1727, 0, 0, 0, 1735, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 0, 635, 637,
	637, 637, 637, 637, 637, 637, 637, 0, 666, 667,
	668, 669, 1988, 0, 0, 0, 0, 0, 0, 0,
	689, 0, 0, 0, 0, 0, 0, 1759, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 1599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1781, 1783, 1784, 1785, 0, 0, 0,
	0, 1797, 1710, 1710, 1797, 1710, 1710, 1410, 1410, 0,
	0, 1965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 1818, 1812, 0, 0, 0,
	1819, 1817, 0, 0, 1822, 532, 533, 534, 1980, 537,
	0, 0, 0, 0, 0, 0, 541, 0, 1689, 1410,
	0, 0, 0, 0, 0, 0, 0, 0, 1838, 0,
	1599, 1410, 0, 0, 0, 0, 1861, 0, 0, 1151,
	0, 0, 725, 0, 0, 0, 0, 1871, 0, 0,
	0, 0, 90, 263, 0, 48, 26, 27, 1797, 90,
	694, 90, 0, 547, 551, 0, 0, 1702, 0, 1885,
	0, 0, 0, 0, 1883, 0, 0, 0, 28, 0,
	569, 577, 576, 586, 587, 579, 580, 581, 582, 583,
	584, 585, 578, 0, 0, 588, 530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1128, 530, 530, 530,
	530, 530, 530, 530, 530, 0, 0, 623, 1531, 0,
	0, 530, 530, 0, 0, 0, 634, 0, 1921, 0,
	577, 576, 586, 587, 579, 580, 581, 582, 583, 584,
	585, 578, 0, 0, 588, 0, 0, 1410, 0, 0,
	0, 1936, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 0, 0, 588, 0, 0, 0,
	0, 0, 0, 263, 0, 48, 26, 27, 0, 0,
	1708, 0, 725, 0, 1953, 0, 0, 1702, 0, 0,
	1707, 0, 47, 0, 0, 1092, 0, 0, 28, 0,
	0, 0, 0, 0, 1964, 0, 0, 0, 0, 1091,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 90, 0, 0, 90, 358, 0,
	90, 0, 0, 0, 814, 1703, 1704, 1706, 0, 1096,
	1689, 1705, 0, 0, 0, 0, 0, 1877, 1090, 0,
	1991, 0, 0, 0, 0, 90, 1992, 1993, 0, 0,
	344, 344, 344, 344, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 689, 0, 970, 0, 0,
	0, 805, 0, 814, 344, 0, 0, 0, 0, 0,
	0, 0, 816, 817, 818, 819, 820, 821, 822, 823,
	1708, 1087, 1084, 1085, 0, 1083, 824, 825, 0, 0,
	1707, 0, 263, 0, 48, 26, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1702, 0, 0, 589,
	0, 0, 0, 273, 0, 1094, 1097, 28, 0, 0,
	273, 273, 0, 0, 0, 932, 273, 0, 0, 0,
	932, 0, 0, 0, 49, 1703, 1704, 1706, 0, 0,
	646, 1705, 0, 0, 0, 0, 849, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 589, 530,
	0, 273, 273, 273, 273, 0, 90, 0, 932, 90,
	90, 90, 90, 90, 0, 648, 530, 0, 0, 0,
	589, 964, 0, 0, 90, 0, 0, 0, 694, 0,
	0, 0, 0, 90, 90, 1089, 263, 0, 48, 26,
	27, 0, 0, 917, 0, 0, 0, 0, 0, 623,
	1702, 0, 926, 927, 0, 0, 0, 0, 0, 1708,
	0, 28, 0, 0, 0, 1121, 0, 0, 1088, 1707,
	0, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 0, 892, 893, 0, 894, 895, 896, 898, 897,
	0, 889, 649, 0, 49, 646, 0, 0, 0, 0,
	664, 647, 0, 0, 0, 0, 653, 652, 1093, 0,
	0, 0, 0, 1957, 1703, 1704, 1706, 0, 0, 0,
	1705, 0, 90, 90, 1095, 0, 1865, 0, 0, 90,
	648, 90, 0, 0, 984, 0, 90, 0, 0, 90,
	0, 90, 0, 0, 90, 0, 263, 0, 48, 26,
	27, 1170, 1171, 0, 0, 0, 0, 0, 0, 0,
	1702, 0, 0, 1708, 0, 0, 0, 0, 0, 814,
	0, 28, 0, 1707, 0, 0, 0, 0, 0, 344,
	0, 273, 1070, 665, 1072, 0, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 649, 0, 0,
	0, 0, 0, 0, 0, 664, 647, 0, 1703, 1704,
	1706, 653, 652, 1954, 1705, 23, 24, 48, 26, 27,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 273,
	28, 0, 263, 0, 48, 26, 27, 1106, 1107, 0,
	551, 0, 0, 0, 0, 0, 1702, 0, 0, 273,
	0, 37, 0, 1708, 0, 50, 0, 28, 0, 0,
	0, 0, 0, 1707, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 90, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1703, 1704,
	1706, 0, 0, 0, 1705, 0, 0, 49, 0, 30,
	31, 33, 32, 35, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 1249,
	0, 0, 1160, 0, 0, 36, 43, 44, 0, 230,
	45, 46, 34, 0, 1381, 232, 47, 0, 0, 1708,
	0, 0, 238, 234, 0, 0, 0, 0, 0, 1707,
	0, 0, 0, 1394, 1395, 1396, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 236, 0, 0, 0, 240, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 0, 1703, 1704, 1706, 0, 1328, 1329,
	1705, 0, 0, 0, 0, 0, 90, 49, 1438, 0,
	0, 0, 0, 0, 618, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 47, 0, 814,
	231, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	233, 0, 241, 242, 243, 244, 248, 0, 0, 0,
	344, 247, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	0, 0, 0, 0, 0, 0, 1516, 0, 0, 0,
	0, 0, 0, 0, 1373, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1388,
	1389, 0, 0, 1390, 0, 0, 1392, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 1566, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1381, 0,
	0, 1633, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1249,
	0, 0, 0, 0, 1670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 1249, 90, 1519,
	0, 0, 0, 0, 0, 618, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1381, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1249, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1669, 0, 0, 0, 0, 1673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1249, 0, 0, 1890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1760, 0, 0, 0, 0,
	0, 0, 0, 0, 1249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1793, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1810, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1943, 0, 0, 476, 465,
	0, 426, 478, 396, 414, 486, 416, 417, 452, 376,
	435, 159, 411, 394, 96, 399, 369, 406, 370, 397,
	428, 120, 395, 90, 467, 438, 134, 227, 228, 484,
	137, 443, 0, 181, 147, 0, 0, 430, 469, 433,
	460, 425, 453, 384, 442, 479, 412, 448, 480, 0,
	0, 0, 363, 0, 1549, 1550, 0, 0, 0, 0,
	0, 109, 0, 447, 474, 408, 489, 451, 368, 445,
	0, 374, 377, 485, 472, 403, 404, 0, 0, 0,
	0, 0, 0, 0, 429, 434, 457, 422, 0, 0,
	0, 0, 1950, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 441, 0, 0, 0, 381, 375, 0, 427,
	0, 0, 0, 383, 0, 401, 458, 0, 365, 463,
	470, 424, 143, 208, 473, 421, 420, 166, 0, 112,
	0, 187, 124, 413, 135, 455, 487, 477, 431, 468,
	398, 407, 114, 405, 173, 160, 199, 440, 161, 171,
	138, 191, 167, 198, 475, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 373, 366, 402, 461, 464,
	388, 450, 378, 409, 456, 410, 432, 393, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 371, 0, 182, 201, 218, 219, 372, 392, 471,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 449, 174, 111, 200, 180,
	0, 387, 391, 385, 386, 436, 437, 481, 482, 483,
	459, 382, 0, 389, 390, 0, 466, 129, 439, 95,
	103, 136, 488, 215, 0, 168, 122, 202, 0, 0,
	415, 367, 419, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 175, 423, 418, 444, 446, 454, 462, 476,
	465, 108, 426, 478, 396, 414, 486, 416, 417, 452,
	376, 435, 159, 411, 394, 96, 399, 369, 406, 370,
	397, 428, 120, 395, 0, 467, 438, 134, 227, 228,
	484, 137, 443, 0, 181, 147, 0, 0, 430, 469,
	433, 460, 425, 453, 384, 442, 479, 412, 448, 480,
	0, 0, 0, 278, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 447, 474, 408, 489, 451, 368,
	445, 0, 374, 377, 485, 472, 403, 404, 0, 0,
	0, 0, 0, 0, 0, 429, 434, 457, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 400, 0, 441, 0, 0, 0, 381, 375, 0,
	427, 0, 0, 0, 383, 0, 401, 458, 0, 365,
	463, 470, 424, 143, 208, 473, 421, 420, 166, 0,
	112, 0, 187, 124, 413, 135, 455, 487, 477, 431,
	468, 398, 407, 114, 405, 173, 160, 199, 440, 161,
	171, 138, 191, 167, 198, 475, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 373, 366, 402, 461,
	464, 388, 450, 378, 409, 456, 410, 432, 393, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 371, 0, 182, 201, 218, 219, 372, 392,
	471, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 449, 174, 111, 200,
	180, 0, 387, 391, 385, 386, 436, 437, 481, 482,
	483, 459, 382, 0, 389, 390, 0, 466, 129, 439,
	95, 103, 136, 488, 215, 0, 168, 122, 202, 0,
	0, 415, 367, 419, 0, 0, 0, 0, 0, 0,
	0, 379, 380, 175, 423, 418, 444, 446, 454, 462,
	476, 465, 108, 426, 478, 396, 414, 486, 416, 417,
	452, 376, 435, 159, 411, 394, 96, 399, 369, 406,
	370, 397, 428, 120, 395, 0, 467, 438, 134, 227,
	228, 484, 137, 443, 0, 181, 147, 0, 0, 430,
	469, 433, 460, 425, 453, 384, 442, 479, 412, 448,
	480, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 447, 474, 408, 489, 451,
	368, 445, 0, 374, 377, 485, 472, 403, 404, 1405,
	0, 0, 0, 0, 0, 0, 429, 434, 457, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 400, 0, 441, 0, 0, 0, 381, 375,
	0, 427, 0, 0, 0, 383, 0, 401, 458, 0,
	365, 463, 470, 424, 143, 208, 473, 421, 420, 166,
	0, 112, 0, 187, 124, 413, 135, 455, 487, 477,
	431, 468, 398, 407, 114, 405, 173, 160, 199, 440,
	161, 171, 138, 191, 167, 198, 475, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 373, 366, 402,
	461, 464, 388, 450, 378, 409, 456, 410, 432, 393,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 371, 0, 182, 201, 218, 219, 372,
	392, 471, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 449, 174, 111,
	200, 180, 0, 387, 391, 385, 386, 436, 437, 481,
	482, 483, 459, 382, 0, 389, 390, 0, 466, 129,
	439, 95, 103, 136, 488, 215, 0, 168, 122, 202,
	0, 0, 415, 367, 419, 0, 0, 0, 0, 0,
	0, 0, 379, 380, 175, 423, 418, 444, 446, 454,
	462, 476, 465, 108, 426, 478, 396, 414, 486, 416,
	417, 452, 376, 435, 159, 411, 394, 96, 399, 369,
	406, 370, 397, 428, 120, 395, 0, 467, 438, 134,
	227, 228, 484, 137, 443, 0, 181, 147, 0, 0,
	430, 469, 433, 460, 425, 453, 384, 442, 479, 412,
	448, 480, 0, 0, 0, 278, 0, 93, 0, 0,
	0, 0, 0, 0, 109, 0, 447, 474, 408, 489,
	451, 368, 445, 0, 374, 377, 485, 472, 403, 404,
	0, 0, 0, 0, 0, 0, 0, 429, 434, 457,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 441, 0, 0, 0, 381,
	375, 0, 427, 0, 0, 0, 383, 0, 401, 458,
	0, 365, 463, 470, 424, 143, 208, 473, 421, 420,
	166, 0, 112, 0, 187, 124, 413, 135, 455, 487,
	477, 431, 468, 398, 407, 114, 405, 173, 160, 199,
	440, 161, 171, 138, 191, 167, 198, 475, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 373, 366,
	402, 461, 464, 388, 450, 378, 409, 456, 410, 432,
	393, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 371, 0, 182, 201, 218, 219,
	372, 392, 471, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 449, 174,
	111, 200, 180, 0, 387, 391, 385, 386, 436, 437,
	481, 482, 483, 459, 382, 0, 389, 390, 0, 466,
	129, 439, 95, 103, 136, 488, 215, 0, 168, 122,
	202, 0, 0, 415, 367, 419, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 175, 423, 418, 444, 446,
	454, 462, 476, 465, 108, 426, 478, 396, 414, 486,
	416, 417, 452, 376, 435, 159, 411, 394, 96, 399,
	369, 406, 370, 397, 428, 120, 395, 0, 467, 438,
	134, 227, 228, 484, 137, 443, 0, 181, 147, 0,
	0, 430, 469, 433, 460, 425, 453, 384, 442, 479,
	412, 448, 480, 0, 0, 0, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 447, 474, 408,
	489, 451, 368, 445, 0, 374, 377, 485, 472, 403,
	404, 0, 0, 0, 0, 0, 0, 0, 429, 434,
	457, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 400, 0, 441, 0, 0, 0,
	381, 375, 0, 427, 0, 0, 0, 383, 0, 401,
	458, 0, 365, 463, 470, 424, 143, 208, 473, 421,
	420, 166, 0, 112, 0, 187, 124, 413, 135, 455,
	487, 477, 431, 468, 398, 407, 114, 405, 173, 160,
	199, 440, 161, 171, 138, 191, 167, 198, 475, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 373,
	366, 402, 461, 464, 388, 450, 378, 409, 456, 410,
	432, 393, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 371, 0, 182, 201, 218,
	219, 372, 392, 471, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 449,
	174, 111, 200, 180, 0, 387, 391, 385, 386, 436,
	437, 481, 482, 483, 459, 382, 0, 389, 390, 0,
	466, 129, 439, 95, 103, 136, 488, 215, 0, 168,
	122, 202, 0, 0, 415, 367, 419, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 175, 423, 418, 444,
	446, 454, 462, 476, 465, 108, 426, 478, 396, 414,
	486, 416, 417, 452, 376, 435, 159, 411, 394, 96,
	399, 369, 406, 370, 397, 428, 120, 395, 0, 467,
	438, 134, 227, 228, 484, 137, 443, 0, 181, 147,
	0, 0, 430, 469, 433, 460, 425, 453, 384, 442,
	479, 412, 448, 480, 50, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 447, 474,
	408, 489, 451, 368, 445, 0, 374, 377, 485, 472,
	403, 404, 0, 0, 0, 0, 0, 0, 0, 429,
	434, 457, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 0, 441, 0, 0,
	0, 381, 375, 0, 427, 0, 0, 0, 383, 0,
	401, 458, 0, 365, 463, 470, 424, 143, 208, 473,
	421, 420, 166, 0, 112, 0, 187, 124, 413, 135,
	455, 487, 477, 431, 468, 398, 407, 114, 405, 173,
	160, 199, 440, 161, 171, 138, 191, 167, 198, 475,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	373, 366, 402, 461, 464, 388, 450, 378, 409, 456,
	410, 432, 393, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 371, 0, 182, 201,
	218, 219, 372, 392, 471, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	449, 174, 111, 200, 180, 0, 387, 391, 385, 386,
	436, 437, 481, 482, 483, 459, 382, 0, 389, 390,
	0, 466, 129, 439, 95, 103, 136, 488, 215, 0,
	168, 122, 202, 0, 0, 415, 367, 419, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 175, 423, 418,
	444, 446, 454, 462, 476, 465, 108, 426, 478, 396,
	414, 486, 416, 417, 452, 376, 435, 159, 411, 394,
	96, 399, 369, 406, 370, 397, 428, 120, 395, 0,
	467, 438, 134, 227, 228, 484, 137, 443, 0, 181,
	147, 0, 0, 430, 469, 433, 460, 425, 453, 384,
	442, 479, 412, 448, 480, 0, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 447,
	474, 408, 489, 451, 368, 445, 0, 374, 377, 485,
	472, 403, 404, 0, 0, 0, 0, 0, 0, 0,
	429, 434, 457, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 400, 0, 441, 0,
	0, 0, 381, 375, 0, 427, 0, 0, 0, 383,
	0, 401, 458, 0, 365, 463, 470, 424, 143, 208,
	473, 421, 420, 166, 0, 112, 0, 187, 124, 413,
	135, 455, 487, 477, 431, 468, 398, 407, 114, 405,
	173, 160, 199, 440, 161, 171, 138, 191, 167, 198,
	475, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 373, 366, 402, 461, 464, 388, 450, 378, 409,
	456, 410, 432, 393, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 361, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 371, 0, 182,
	201, 218, 219, 372, 392, 471, 211, 212, 213, 214,
	0, 0, 0, 362, 360, 128, 178, 132, 139, 169,
	216, 449, 174, 111, 200, 180, 356, 387, 391, 385,
	386, 436, 437, 481, 482, 483, 459, 382, 0, 389,
	390, 0, 466, 129, 439, 95, 103, 136, 488, 215,
	0, 168, 122, 202, 0, 0, 415, 367, 419, 0,
	0, 0, 0, 0, 0, 0, 379, 380, 175, 423,
	418, 444, 446, 454, 462, 476, 465, 108, 426, 478,
	396, 414, 486, 416, 417, 452, 376, 435, 159, 411,
	394, 96, 399, 369, 406, 370, 397, 428, 120, 395,
	0, 467, 438, 134, 227, 228, 484, 137, 443, 0,
	181, 147, 0, 0, 430, 469, 433, 460, 425, 453,
	384, 442, 479, 412, 448, 480, 0, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	447, 474, 408, 489, 451, 368, 445, 0, 374, 377,
	485, 472, 403, 404, 0, 0, 0, 0, 0, 0,
	0, 429, 434, 457, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 441,
	0, 0, 0, 381, 375, 0, 427, 0, 0, 0,
	383, 0, 401, 458, 0, 365, 463, 470, 424, 143,
	208, 473, 421, 420, 166, 0, 112, 0, 187, 124,
	413, 135, 455, 487, 477, 431, 468, 398, 407, 114,
	405, 173, 160, 199, 440, 161, 171, 138, 191, 167,
	198, 475, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 373, 366, 402, 461, 464, 388, 450, 378,
	409, 456, 410, 432, 393, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 371, 0,
	182, 201, 218, 219, 372, 392, 471, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 449, 174, 111, 200, 180, 0, 387, 391,
	385, 386, 436, 437, 481, 482, 483, 459, 382, 0,
	389, 390, 0, 466, 129, 439, 95, 103, 136, 488,
	215, 0, 168, 122, 202, 0, 0, 415, 367, 419,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 175,
	423, 418, 444, 446, 454, 462, 476, 465, 108, 426,
	478, 396, 414, 486, 416, 417, 452, 376, 435, 159,
	411, 394, 96, 399, 369, 406, 370, 397, 428, 120,
	395, 0, 467, 438, 134, 227, 228, 484, 137, 443,
	0, 181, 147, 0, 0, 430, 469, 433, 460, 425,
	453, 384, 442, 479, 412, 448, 480, 0, 0, 0,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 447, 474, 408, 489, 451, 368, 445, 0, 374,
	377, 485, 472, 403, 404, 0, 0, 0, 0, 0,
	0, 0, 429, 434, 457, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 0,
	441, 0, 0, 0, 381, 375, 0, 427, 0, 0,
	0, 383, 0, 401, 458, 0, 365, 463, 470, 424,
	143, 208, 473, 421, 420, 166, 0, 112, 0, 187,
	124, 413, 135, 455, 487, 477, 431, 468, 398, 407,
	114, 405, 173, 160, 199, 440, 161, 171, 138, 191,
	167, 198, 475, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 373, 366, 402, 461, 464, 388, 450,
	378, 409, 456, 410, 432, 393, 0, 0, 0, 0,
	0, 97, 188, 704, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 361, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 371,
	0, 182, 201, 218, 219, 372, 392, 471, 211, 212,
	213, 214, 0, 0, 0, 362, 360, 128, 178, 132,
	139, 169, 216, 449, 174, 111, 200, 180, 356, 387,
	391, 385, 386, 436, 437, 481, 482, 483, 459, 382,
	0, 389, 390, 0, 466, 129, 439, 95, 103, 136,
	488, 215, 0, 168, 122, 202, 0, 0, 415, 367,
	419, 0, 0, 0, 0, 0, 0, 0, 379, 380,
	175, 423, 418, 444, 446, 454, 462, 476, 465, 108,
	426, 478, 396, 414, 486, 416, 417, 452, 376, 435,
	159, 411, 394, 96, 399, 369, 406, 370, 397, 428,
	120, 395, 0, 467, 438, 134, 227, 228, 484, 137,
	443, 0, 181, 147, 0, 0, 430, 469, 433, 460,
	425, 453, 384, 442, 479, 412, 448, 480, 0, 0,
	0, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 447, 474, 408, 489, 451, 368, 445, 0,
	374, 377, 485, 472, 403, 404, 0, 0, 0, 0,
	0, 0, 0, 429, 434, 457, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	0, 441, 0, 0, 0, 381, 375, 0, 427, 0,
	0, 0, 383, 0, 401, 458, 0, 365, 463, 470,
	424, 143, 208, 473, 421, 420, 166, 0, 112, 0,
	187, 124, 413, 135, 455, 487, 477, 431, 468, 398,
	407, 114, 405, 173, 160, 199, 440, 161, 171, 138,
	191, 167, 198, 475, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 373, 366, 402, 461, 464, 388,
	450, 378, 409, 456, 410, 432, 393, 0, 0, 0,
	0, 0, 97, 188, 351, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 361, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	371, 0, 182, 201, 218, 219, 372, 392, 471, 211,
	212, 213, 214, 0, 0, 0, 362, 360, 354, 353,
	132, 139, 169, 216, 449, 174, 111, 200, 180, 356,
	387, 391, 385, 386, 436, 437, 481, 482, 483, 459,
	382, 0, 389, 390, 0, 466, 129, 439, 95, 103,
	136, 488, 215, 0, 168, 122, 202, 0, 0, 415,
	367, 419, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 175, 423, 418, 444, 446, 454, 462, 476, 465,
	108, 426, 478, 396, 414, 486, 416, 417, 452, 376,
	435, 159, 411, 394, 96, 399, 369, 406, 370, 397,
	428, 120, 395, 0, 467, 438, 134, 227, 228, 484,
	137, 443, 0, 181, 147, 0, 0, 430, 469, 433,
	460, 425, 453, 384, 442, 479, 412, 448, 480, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 447, 474, 408, 489, 451, 368, 445,
	0, 374, 377, 485, 472, 403, 404, 0, 0, 0,
	0, 0, 0, 0, 429, 434, 457, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 441, 0, 0, 0, 381, 375, 0, 427,
	0, 0, 0, 383, 0, 401, 458, 0, 365, 463,
	470, 424, 143, 208, 473, 421, 420, 166, 0, 112,
	0, 187, 124, 413, 135, 455, 487, 477, 431, 468,
	398, 407, 114, 405, 173, 160, 199, 440, 161, 171,
	138, 191, 167, 198, 475, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 373, 366, 402, 461, 464,
	388, 450, 378, 409, 456, 410, 432, 393, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 371, 0, 182, 201, 218, 219, 372, 392, 471,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 449, 174, 111, 200, 180,
	0, 387, 391, 385, 386, 436, 437, 481, 482, 483,
	459, 382, 0, 389, 390, 0, 466, 129, 439, 95,
	103, 136, 488, 215, 0, 168, 122, 202, 0, 0,
	415, 367, 419, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 175, 423, 418, 444, 446, 454, 462, 159,
	0, 108, 96, 0, 0, 281, 0, 0, 0, 120,
	277, 0, 0, 0, 134, 227, 228, 322, 137, 0,
	0, 181, 147, 0, 0, 0, 0, 313, 314, 0,
	0, 0, 0, 0, 0, 982, 0, 50, 0, 0,
	278, 301, 280, 303, 304, 305, 306, 0, 0, 109,
	302, 307, 308, 309, 983, 0, 0, 275, 293, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 0, 0, 0, 0,
	334, 0, 292, 0, 0, 288, 289, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 332, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 336, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 310, 323,
	333, 329, 330, 327, 328, 326, 325, 324, 335, 315,
	316, 317, 318, 320, 0, 129, 319, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 914, 0, 281, 0, 0, 0, 120, 277,
	175, 0, 0, 134, 227, 228, 322, 137, 331, 108,
	181, 147, 0, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 278,
	301, 280, 303, 304, 305, 306, 0, 0, 109, 302,
	307, 308, 309, 0, 0, 0, 275, 293, 0, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 291, 271, 0, 0, 0, 334,
	0, 292, 0, 0, 288, 289, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 332, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 336, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 310, 323, 333,
	329, 330, 327, 328, 326, 325, 324, 335, 315, 316,
	317, 318, 320, 0, 129, 319, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 281, 0, 0, 0, 120, 277, 175,
	0, 0, 134, 227, 228, 322, 137, 331, 108, 181,
	147, 0, 0, 0, 0, 313, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 543, 278, 301,
	280, 303, 304, 305, 306, 0, 0, 109, 302, 307,
	308, 309, 0, 0, 0, 275, 293, 0, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 0, 0, 0, 0, 334, 0,
	292, 0, 0, 288, 289, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 332, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	336, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 310, 323, 333, 329,
	330, 327, 328, 326, 325, 324, 335, 315, 316, 317,
	318, 320, 0, 129, 319, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 281, 0, 0, 0, 120, 277, 175, 0,
	0, 134, 227, 228, 322, 137, 331, 108, 181, 147,
	0, 0, 0, 0, 313, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 278, 301, 280,
	303, 304, 305, 306, 0, 0, 109, 302, 307, 308,
	309, 0, 0, 0, 275, 293, 0, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 291, 271, 0, 0, 0, 334, 0, 292,
	0, 0, 288, 289, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 332, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 336,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 310, 323, 333, 329, 330,
	327, 328, 326, 325, 324, 335, 315, 316, 317, 318,
	320, 0, 129, 319, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 159, 0,
	0, 96, 0, 0, 281, 331, 108, 0, 120, 277,
	0, 0, 0, 134, 227, 228, 322, 137, 0, 0,
	181, 147, 0, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 278,
	301, 280, 303, 304, 305, 306, 0, 0, 109, 302,
	307, 308, 309, 0, 0, 0, 275, 293, 0, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 334,
	0, 292, 0, 0, 288, 289, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 332, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 336, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 310, 323, 333,
	329, 330, 327, 328, 326, 325, 324, 335, 315, 316,
	317, 318, 320, 0, 129, 319, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 281, 0, 0, 0, 120, 277, 175,
	0, 0, 134, 227, 228, 322, 137, 331, 108, 181,
	147, 0, 0, 0, 0, 313, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 278, 301,
	280, 303, 304, 305, 306, 0, 0, 109, 302, 307,
	308, 309, 0, 0, 0, 275, 293, 0, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 290, 291, 0, 0, 0, 0, 334, 0,
	292, 0, 0, 288, 289, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 332, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	336, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 310, 323, 333, 329,
	330, 327, 328, 326, 325, 324, 335, 315, 316, 317,
	318, 320, 0, 129, 319, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 0,
	0, 134, 227, 228, 322, 137, 331, 108, 181, 147,
	0, 0, 0, 0, 313, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 278, 301, 280,
	303, 304, 305, 306, 0, 0, 109, 302, 307, 308,
	309, 0, 0, 0, 0, 293, 0, 321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 291, 0, 0, 0, 0, 334, 0, 292,
	0, 0, 288, 289, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 332, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 1989, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 336,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 310, 323, 333, 329, 330,
	327, 328, 326, 325, 324, 335, 315, 316, 317, 318,
	320, 0, 129, 319, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 281, 0, 0, 0, 120, 0, 175, 0, 0,
	134, 227, 228, 322, 137, 331, 108, 181, 147, 0,
	0, 0, 0, 313, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 278, 301, 280, 303,
	304, 305, 306, 0, 0, 109, 302, 307, 308, 309,
	0, 0, 0, 0, 293, 0, 321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 291, 0, 0, 0, 0, 334, 0, 292, 0,
	0, 288, 289, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	332, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 336, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 310, 323, 333, 329, 330, 327,
	328, 326, 325, 324, 335, 315, 316, 317, 318, 320,
	0, 129, 319, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 322, 137, 331, 108, 181, 147, 0, 0,
	0, 0, 313, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 278, 301, 280, 303, 304,
	305, 306, 0, 0, 109, 302, 307, 308, 309, 0,
	0, 0, 0, 293, 0, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 334, 0, 292, 0, 0,
	288, 289, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 332,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 336, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 310, 323, 333, 329, 330, 327, 328,
	326, 325, 324, 335, 315, 316, 317, 318, 320, 0,
	129, 319, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 175, 0, 0, 134, 227,
	228, 0, 137, 331, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 278, 0, 1235, 1236, 1237, 0,
	0, 0, 0, 109, 1240, 1238, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 1242, 1247,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 1244, 0, 1246, 1245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1234, 0, 0, 278, 0, 1235, 1236, 1237, 0, 0,
	0, 0, 109, 1240, 1238, 308, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 1242, 1247, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 1244, 0, 1246, 1245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 1235, 1236, 1237, 0, 0, 0,
	0, 109, 1240, 1238, 308, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 1242, 1247, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 1244, 0, 1246, 1245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	120, 0, 175, 751, 0, 134, 227, 228, 0, 137,
	0, 108, 181, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1715,
	0, 363, 0, 1713, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 752, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 0, 778, 779,
	164, 780, 781, 782, 784, 783, 753, 754, 755, 759,
	757, 756, 758, 730, 732, 206, 728, 731, 737, 733,
	734, 735, 749, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 750, 760, 761, 762, 763, 764,
	765, 766, 767, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 729,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 0, 137, 0,
	108, 181, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 301, 908, 303, 304, 305, 306, 0, 0, 109,
	302, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 0, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	175, 751, 0, 134, 227, 228, 0, 137, 0, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 752,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 1870, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 0, 778, 779, 164, 780,
	781, 782, 784, 783, 753, 754, 755, 759, 757, 756,
	758, 730, 732, 206, 728, 731, 737, 733, 734, 735,
	749, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 750, 760, 761, 762, 763, 764, 765, 766,
	767, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 729, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 565, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	567, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 562, 561, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 751,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 0, 778, 779, 164, 780, 781, 782,
	784, 783, 753, 754, 755, 759, 757, 756, 758, 730,
	732, 206, 728, 731, 737, 733, 734, 735, 749, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	750, 760, 761, 762, 763, 764, 765, 766, 767, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 729, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 175, 0, 0,
	134, 227, 228, 0, 137, 0, 108, 181, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1715, 0, 363, 0, 1713, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 0, 137, 0, 108, 181, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 493, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 143, 208, 0, 0, 0,
	1001, 0, 1000, 0, 1002, 1003, 0, 135, 0, 0,
	1004, 1007, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 175, 0, 0, 134, 227,
	228, 0, 137, 0, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 1577, 164, 123, 118, 157, 185, 148, 192,
	1579, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	1578, 204, 153, 158, 156, 203, 1580, 196, 146, 142,
	0, 101, 194, 144, 141, 1581, 906, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	902, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	23, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 0, 0, 0, 1942,
	120, 0, 175, 0, 0, 134, 227, 228, 0, 137,
	0, 108, 181, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 0, 93, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 1411, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 693, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 0, 137, 0,
	108, 181, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 695, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 0, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	175, 0, 0, 134, 227, 228, 0, 137, 0, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 23, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 0,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 175, 0, 0,
	134, 227, 228, 0, 137, 0, 108, 181, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 0, 844,
	0, 0, 845, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 0, 137, 0, 108, 181, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 93, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 0,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 804, 174,
	111, 200, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 714, 175, 0, 0, 134, 227,
	228, 0, 137, 0, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 713, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 693, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 695, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 691,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	671, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 346, 168, 122, 202, 0, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 175, 0, 0, 0, 134, 227, 228, 0,
	137, 108, 0, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	120, 0, 175, 0, 0, 134, 227, 228, 0, 137,
	0, 108, 181, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 93, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 0, 137, 0,
	108, 181, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 93, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 0, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	175, 0, 0, 134, 227, 228, 0, 137, 0, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 1411, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 1532, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 0,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 175, 0, 0,
	134, 227, 228, 0, 137, 0, 108, 181, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 695, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 0, 137, 0, 108, 181, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 0,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 175, 0, 0, 134, 227,
	228, 0, 137, 589, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 567, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 493, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 108,
}

var yyPact = [...]int16{
	2809, -1000, -204, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1512, 1554, -1000, -1000, -1000, -1000, -1000, -1000, 1293,
	1195, 394, 487, 128, 17782, 485, 2845, 18091, -1000, 177,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1178, -1000, -1000,
	-1000, -1000, -1000, 1504, 1509, 1257, 1475, 1382, -1000, 8498,
	380, 15000, 17473, 6902, -1000, 20254, -169, 438, 427, 20563,
	354, 354, 20563, 20563, 18091, 484, 354, -1000, -54, 475,
	18091, -1000, 18091, 378, 1057, 378, 378, 378, 18091, -1000,
	541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18091,
	1028, 1428, 346, 5538, 5538, 5538, 5538, 256, 5538, 25,
	1318, -1000, -1000, -1000, -1000, 5538, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 922, 1437, 9129, 9129,
	1512, -1000, 1178, -1000, -1000, -1000, 1416, -1000, -1000, 736,
	1542, -1000, 12219, 540, -1000, 9129, 107, 1134, -1000, -1000,
	-194, 1134, -1000, -1000, 525, -1000, -1000, -1000, 10056, 10056,
	10056, 10056, 10056, 10056, 10056, -1000, -1000, -1000, -1000, 64,
	873, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	539, -1000, 8820, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
	1134, 9129, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
	1134, 2571, 1134, 1134, 1134, 1134, -1000, 17163, 1147, 1386,
	-1000, -1000, -1000, 1469, 13764, 16854, 18091, 1110, -1000, 1201,
	6561, -2, -1000, -1000, -1000, 679, 535, 16545, -1000, -1000,
	-1000, 1427, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1066, -1000, 12528, 12528, 472, -1000, -1000, 354, 354, 1299,
	1005, 702, 991, 1316, 413, 1468, 354, 18091, -1000, 16236,
	5538, 406, 18091, 1450, 1315, 18091, 978, 975, -1000, 6220,
	-1000, 5538, 5538, 5538, 5538, 5538, 5538, 5538, 5538, -1000,
	-1000, -1000, -1000, -1000, -1000, 5538, 5538, -1000, 41, -1000,
	18091, -1000, -1000, -1000, -1000, 1549, 571, 825, 534, 1204,
	-1000, 805, 1504, 922, 1382, 15927, 1329, -1000, -1000, 18091,
	-1000, 9129, 9129, 886, -1000, 19945, -1000, -1000, 4174, 582,
	10056, 771, 722, 10056, 10056, 10056, 10056, 10056, 10056, 10056,
	10056, 10056, 10056, 10056, 10056, 10056, 10056, 10056, 806, 2456,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 973, -1000, 372, -1000, 1178, 11601, 11601, 53,
	53, 53, 53, 53, 53, 19636, -1000, -208, 7880, -1000,
	7243, 922, 1045, 775, 8820, 8498, 8498, 9129, 9129, 10056,
	19018, 8498, 1483, 690, 775, 19018, -1000, 922, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 110, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8498, 8498, 8498, 8498,
	273, 18091, -1000, 19018, 15000, 15000, 15000, 15000, 15000, -1000,
	1353, 1352, -1000, 1402, 1343, 1371, 18091, -1000, 1062, 13764,
	486, 1134, -1000, 19327, -1000, -1000, 273, 1176, 15000, 18091,
	-1000, -1000, 5879, 1201, -2, 1182, -1000, -15, 20, 7571,
	7243, 547, -1000, -1000, -1000, -1000, 163, 13146, 87, -124,
	54, -1000, -1000, -1000, -1000, -1000, 1263, -1000, -1000, -1000,
	1263, 284, 1263, 1263, 1263, -1000, 1263, 1263, 97, 97,
	97, 97, 97, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1290, 1289, -1000, 1263, 1263, 1263, -1000, 1263, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1278, 304,
	1278, 1264, 1264, -1000, -1000, 87, 15618, 18091, 18091, -97,
	968, 5538, 1444, 5538, 18091, 1533, 18091, -1000, -1000, -1000,
	12528, 18091, -1000, 2390, 18091, -1000, 18091, -1000, -1000, 18091,
	5538, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 652, -1000, -1000, -1000,
	-1000, 1387, 9129, 9129, 4856, 9129, -1000, -1000, -1000, 1437,
	-1000, 1483, 1511, -1000, 1412, 1406, 8498, -1000, -1000, 582,
	626, -1000, -1000, 869, -1000, -1000, -1000, -1000, 533, 1134,
	-1000, 2263, -1000, -1000, -1000, -1000, 771, 10056, 10056, 10056,
	1146, 2263, 2241, 195, 445, 53, 172, 172, 51, 51,
	51, 51, 51, 27, 27, -1000, -1000, -1000, -1000, -90,
	-1000, 1263, 1278, 304, 1278, 1264, 1264, -1000, -1000, 922,
	104, -131, -1000, -1000, -1000, -1000, -1000, -1000, -194, 882,
	-1000, -1000, 865, 922, 8498, 1045, 1186, 12219, -1000, -1000,
	-1000, 9129, -1000, 922, 1025, 1025, 751, 673, 631, 2192,
	1203, -1000, 531, 1025, 8498, 699, -1000, 9129, 922, -1000,
	-1000, 1025, 922, 1025, 1025, 1133, 1134, -1000, 1173, -1000,
	677, 1386, 1287, 1314, 1063, -1000, -1000, -1000, -1000, 1351,
	-1000, 1342, -1000, -1000, -1000, -1000, -92, 470, 442, 439,
	20563, -1000, 1523, 15000, 1160, -1000, -1000, 1182, -2, 46,
	-1000, -1000, -1000, -1000, 775, 675, -1000, -1000, 965, 7243,
	1180, 1418, -1000, -1000, -1000, -1000, -1000, -1000, 1282, 763,
	20563, 327, 444, 390, 387, 962, -1000, -1000, -1000, 803,
	-1000, 20563, -1000, 1547, -1000, -1000, 307, -1000, 305, 695,
	881, 18091, 157, 1280, 10674, 859, -1000, -232, -1000, 47,
	-1000, -1000, 843, 97, 97, 1263, 97, 97, 97, -1000,
	-1000, 547, 1426, 547, 547, 547, 547, 876, 876, -131,
	-131, -1000, -1000, -1000, 858, 1278, -1000, -1000, -1000, 856,
	-1000, 1277, 18091, 20563, 1462, 1457, -1000, 7243, -1000, -1000,
	-1000, -1000, -1000, 1454, 1154, -1000, -1000, -1000, -1000, 411,
	-1000, 1303, -1000, 1364, 1245, 510, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 271, 490, -1000,
	5538, -1000, 659, 18091, 18091, 1373, 775, 775, 530, -1000,
	-1000, 18091, -1000, -1000, -1000, -1000, 1166, -1000, -1000, -1000,
	5197, 8498, -1000, 1146, 2263, 784, -1000, 10056, 10056, 133,
	-1000, -1000, -1000, 132, 129, 58, -1000, -194, -1000, 1025,
	-1000, 8498, 775, -1000, -1000, -1000, 1463, 806, 1463, 10056,
	10056, 10056, 10056, 10056, 4856, -70, 1155, 686, -1000, 9129,
	828, -1000, -1000, -1000, -1000, -1000, 1313, 19018, 1134, -1000,
	15309, 20563, 1512, 19018, 9129, 9129, -1000, -1000, 9129, 1274,
	-1000, 9129, -1000, -1000, -1000, -1000, 1273, 1134, 1134, 1134,
	1012, -1000, 1512, 1160, -1000, -1000, -1000, -33, 15, -1000,
	9129, -1000, 4515, -1000, 163, -1000, 18400, -1000, 1541, 1492,
	334, 10, -1000, 942, 932, -1000, 916, -1000, -1000, 40,
	-1000, -174, 123, 117, -1000, -1000, 1134, -1000, 1271, 1453,
	-1000, 1432, 852, -1000, 10365, -193, -1000, -1000, -194, -1000,
	-1000, -1000, 1134, -1000, 1270, 1269, -1000, 1260, 1134, 518,
	-1000, -1000, -1000, -1000, -1000, 1105, 547, 547, 97, 547,
	547, 547, -1000, 605, -1000, -1000, -1000, -1000, 1023, -1000,
	1019, -1000, -1000, 1175, -1000, 1017, 18091, 20563, 1267, 1309,
	1178, 1178, 1165, -1000, 660, 1491, 237, 18091, 1533, 1533,
	20563, -1000, 428, 20563, -1000, 20563, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 20563, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18091, -1000, -1000, -1000,
	-1000, -1000, 20563, 343, -1000, -1000, 875, 9129, -1000, -1000,
	-1000, 7243, -1000, 1523, 15000, -1000, -1000, 922, -1000, 10056,
	2263, 2263, 50, 45, 43, -1000, 865, -1000, -1000, -1000,
	922, 1263, 1263, -1000, 1263, 1264, -1000, -1000, 1263, 164,
	1263, 141, 922, 922, 286, 391, 356, 263, 162, -1000,
	1134, -62, -1000, 775, 9129, -1000, 1434, 1152, 1143, -1000,
	-1000, 8189, 922, 1014, 507, 1012, 1504, -1000, 775, 775,
	775, 18709, 775, -219, 18709, 18709, 18709, 14691, 20563, 1504,
	-1000, -1000, -1000, -1000, 775, 3833, -1000, 7243, 1009, -1000,
	295, 1263, 437, 437, -177, 303, 299, 1134, -1000, -1000,
	-1000, -1000, -169, -1000, -1000, 695, -1000, 1260, 9129, 18709,
	116, -1000, 1162, 1103, 10983, -1000, 13455, -1000, 922, -1000,
	846, -1000, 783, 1100, 7243, -1000, -1000, -1000, 547, -1000,
	-1000, -1000, -1000, -1000, 97, 864, 97, 851, -1000, 848,
	1210, 1306, 14382, 18091, -1000, -1000, 7243, 3833, 392, 1480,
	-1000, -1000, 1490, -1000, 1123, 1258, 20563, -1000, -1000, 285,
	-1000, 1238, -1000, -1000, -1000, -1000, 1443, 20563, -1000, -1000,
	775, 1520, 1156, -1000, 2263, -1000, -1000, -1000, -1000, -1000,
	-1000, 272, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10056, 10056, -1000, 10056, 10056, 10056, 922, 862, 775,
	298, -1000, 1134, -1000, -1000, 1151, 20563, 20563, -1000, -1000,
	1003, -1000, -1000, 998, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 995, 995, 995, 486, -1000, -1000, -1000, -1000, -1000,
	-1000, 917, 18400, 1441, -1000, -1000, -1000, 737, -1000, -1000,
	715, 243, 720, -1000, 20563, -169, 9129, -1000, 1134, 786,
	987, 9129, 1237, 845, -1000, 1091, -1000, 136, 104, -131,
	-1000, -1000, -1000, -1000, -1000, -1000, 1134, -1000, 547, -1000,
	547, 1090, 1089, 14382, 20563, 18091, 1082, 1148, -1000, 293,
	1235, -1000, -1000, 20563, -1000, -1000, -1000, -1000, -1000, 222,
	2836, -1000, 12837, 1234, 1233, 18709, 1134, 350, 1514, 1508,
	-1000, -1000, 286, 286, 286, 286, 134, -1000, -1000, 1546,
	-1000, 1134, -1000, 1178, 504, -1000, 20563, -1000, -1000, -219,
	-1000, -1000, -1000, -92, 1279, 1131, 130, -1000, 914, 653,
	785, 636, 628, 609, 600, 598, 597, 596, -1000, -1000,
	-1000, 1543, -1000, -1000, -1000, 1544, 1230, -1000, 1226, 786,
	9129, 251, 1305, 837, -1000, 1072, 1067, -1000, -1000, -1000,
	-1000, -1000, 1026, 1224, 1223, -182, 843, 14382, 1088, -1000,
	219, 2836, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1512, 20563, 20563, 20563, 20563, 373, 9747, 9129, 988,
	11292, 12837, 12837, 11292, 12837, 12837, 18400, 18400, 985, 270,
	289, -1000, 9129, 9129, -1000, -1000, -1000, -1000, 922, 197,
	-143, 19018, 1143, 922, 20563, -1000, -1000, -1000, -1000, 20563,
	-1000, -141, 1131, 20563, -1000, 836, -1000, -1000, 747, 819,
	747, 747, 747, 747, 747, 437, 437, 20563, 18400, 251,
	786, -1000, -65, 1539, -151, 655, -1000, -1000, -182, 14382,
	18400, 1523, 1217, 956, -94, 20563, 9129, 2516, -1000, 1504,
	1139, 11910, -1000, -1000, -1000, -1000, 20563, 1535, 1534, 1526,
	1525, 2257, 107, 611, 182, -1000, -1000, 11292, -1000, -1000,
	-1000, -1000, -1000, 972, 961, 1299, 955, -1000, 20563, 1212,
	775, 1126, -1000, 1365, -73, -146, 1114, -1000, -1000, 1134,
	953, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 695, 695, 951, 925, -1000, 251, -1000,
	437, 437, -1000, -1000, -1000, 156, 802, 810, 776, 770,
	16, -1000, 1507, 1523, 926, 921, 917, 18709, -182, -1000,
	-197, -1000, 775, -1000, -1000, 2836, 1437, 20563, 216, -1000,
	-1000, 1438, -1000, -1000, -1000, -1000, -1000, 2836, 2836, 2836,
	-1000, 326, -97, -1000, 270, 1404, 18400, -1000, 1363, -1000,
	20563, -1000, 1131, -1000, -1000, 341, 917, -1000, -1000, -1000,
	767, -1000, 762, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14073, 917, 1523, 917, 1279, 913, 1523, 9129, -206, -1000,
	-1000, 12528, 1488, 20563, 2730, -1000, 140, 2620, 201, -1000,
	206, -1000, -1000, 267, 911, -100, 922, -1000, 18091, 1279,
	-1000, -1000, -1000, 499, 1279, 917, -1000, -1000, -1000, 917,
	775, 674, 1178, -1000, -1000, -1000, 612, 654, -1000, 186,
	-1000, 265, -1000, -144, -1000, 1211, -1000, 7243, -1000, -1000,
	1279, -1000, -1000, 353, 180, -1000, -1000, 1134, -147, 20563,
	-1000, -1000, -1000, 2836, 9438, -1000, 908, 2377, 286, 922,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1804, 21, 111, 1801, 1800, 1794, 1573, 1565, 1563,
	1561, 1792, 1784, 1782, 1781, 1778, 1776, 1774, 1773, 1772,
	1771, 1769, 1767, 1765, 1763, 1762, 1760, 1758, 502, 1756,
	1754, 1753, 109, 1752, 107, 1751, 1750, 74, 113, 73,
	68, 2014, 1746, 59, 112, 96, 1743, 80, 1735, 1730,
	156, 1729, 98, 1728, 1725, 252, 1719, 1715, 42, 27,
	28, 48, 1712, 1711, 106, 147, 1710, 1707, 1706, 43,
	1703, 1702, 88, 20, 33, 34, 37, 1701, 77, 23,
	1699, 87, 1698, 1697, 1696, 1693, 45, 1691, 91, 44,
	39, 8, 1690, 13, 14, 97, 70, 50, 25, 129,
	94, 1686, 67, 95, 86, 1685, 1684, 959, 1682, 1680,
	1678, 1676, 1675, 1674, 917, 110, 1672, 1669, 1667, 71,
	0, 470, 250, 100, 1657, 78, 1654, 1924, 114, 92,
	47, 1653, 58, 1980, 72, 1651, 1650, 66, 118, 3,
	101, 99, 1649, 108, 1648, 1646, 1643, 120, 61, 190,
	90, 1636, 1635, 1634, 76, 82, 57, 84, 93, 31,
	1633, 1632, 1631, 54, 1630, 41, 32, 1, 85, 1628,
	1627, 1626, 1624, 46, 65, 1623, 40, 1622, 16, 9,
	5, 15, 6, 1621, 1620, 1619, 2, 1618, 51, 1616,
	7, 1615, 10, 1614, 1613, 1611, 56, 1609, 1608, 1607,
	19, 1606, 1605, 24, 18, 64, 49, 1604, 1603, 36,
	79, 55, 1602, 53, 12, 4, 29, 1601, 11, 1600,
	1599, 1595, 17, 30, 1592, 1589, 1588, 1586, 1585, 1584,
	52, 1583, 1580, 1795, 477, 1579, 1578, 26, 1575, 1570,
	1568, 1544, 620,
}

var yyR1 = [...]uint8{
	0, 231, 232, 232, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 235,
	235, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 219, 219, 218, 220, 220, 12, 12, 12, 12,
	12, 212, 212, 212, 212, 212, 13, 13, 215, 215,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	236, 236, 237, 237, 237, 237, 237, 237, 237, 210,
	210, 210, 211, 211, 211, 213, 213, 214, 214, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 217, 217,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 158, 139, 139, 139, 139,
	139, 139, 139, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 205,
	205, 205, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 207, 208, 201, 201, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 148, 148, 148, 148, 148, 148, 200, 200, 196,
	196, 196, 196, 196, 196, 196, 196, 143, 143, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 142,
	142, 142, 142, 142, 142, 142, 142, 144, 144, 144,
	144, 144, 144, 144, 144, 140, 140, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 157, 157,
	147, 147, 155, 155, 156, 156, 156, 154, 154, 154,
	151, 151, 152, 152, 153, 153, 153, 149, 149, 149,
	150, 150, 150, 160, 181, 181, 181, 183, 183, 184,
	184, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 169, 169, 209, 209, 180, 180, 180, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 168, 168,
	178, 178, 179, 179, 176, 176, 176, 177, 163, 163,
	163, 163, 163, 164, 165, 165, 165, 165, 161, 162,
	203, 203, 203, 204, 204, 166, 166, 167, 167, 174,
	174, 174, 174, 238, 238, 172, 172, 173, 173, 173,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 239, 239, 240, 240, 240, 240,
	240, 240, 240, 187, 185, 185, 186, 186, 17, 18,
	18, 18, 18, 18, 19, 19, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	112, 112, 109, 109, 110, 110, 111, 111, 111, 113,
	113, 113, 136, 136, 136, 23, 23, 25, 25, 26,
	27, 24, 24, 24, 24, 24, 241, 28, 29, 29,
	30, 30, 30, 34, 34, 34, 32, 32, 33, 33,
	39, 39, 38, 38, 40, 40, 40, 40, 124, 124,
	124, 123, 123, 42, 42, 43, 43, 44, 44, 45,
	45, 45, 222, 222, 221, 221, 223, 223, 223, 223,
	223, 223, 57, 57, 93, 93, 93, 96, 96, 46,
	46, 46, 46, 47, 47, 48, 48, 49, 49, 131,
	131, 130, 130, 130, 129, 129, 51, 51, 51, 53,
	52, 52, 52, 52, 54, 54, 56, 56, 55, 55,
	58, 58, 58, 58, 59, 59, 94, 94, 41, 41,
	41, 41, 41, 41, 41, 108, 108, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 71,
	71, 71, 71, 71, 71, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 37, 37, 72, 72,
	72, 78, 73, 73, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 69, 69, 69, 69, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 242,
	242, 70, 70, 70, 70, 35, 35, 35, 35, 35,
	134, 134, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 138, 138, 138, 138,
	138, 138, 138, 138, 82, 82, 36, 36, 80, 80,
	81, 83, 83, 79, 79, 79, 224, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 66, 66, 66,
	84, 84, 85, 85, 86, 86, 87, 87, 88, 89,
	89, 89, 90, 90, 90, 90, 91, 91, 91, 63,
	63, 63, 63, 63, 63, 92, 92, 92, 92, 97,
	97, 74, 74, 76, 76, 75, 77, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 103, 101, 101, 101,
	126, 126, 126, 106, 106, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 121, 121, 122, 122,
	127, 127, 127, 128, 128, 225, 225, 225, 226, 226,
	226, 227, 227, 228, 229, 229, 230, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 233, 234, 132,
	133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 8,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 8, 8, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 2, 1, 1, 1, 3,
	3, 4, 1, 2, 1, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 3, 0, 2, 0,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 1, 1, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 4, 4, 4,
	4, 4, 1, 5, 2, 2, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 1, 1, 2, 2, 10, 7,
	0, 1, 1, 0, 3, 0, 1, 1, 3, 0,
	4, 1, 3, 2, 1, 1, 2, 1, 1, 1,
	6, 11, 13, 13, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 0, 4, 1, 3, 1, 1, 1, 1,
	1, 1, 4, 8, 1, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 0, 4, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	2, 4, 5, 6, 4, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 3, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -231, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	120, 121, 123, 122, 153, 124, 146, 52, 200, 201,
	203, 204, 26, 147, 148, 151, 152, -233, 8, 307,
	56, -232, 349, -86, 15, -30, 5, -28, -241, -28,
	-28, -28, -28, -28, -170, 56, -125, -199, 129, 162,
	299, 126, 142, 160, 161, 325, 127, 144, 74, -107,
	130, 132, 127, 127, 128, 130, 299, 126, 127, -55,
	-127, 59, -120, 61, 169, 316, 21, 200, 213, 214,
	205, 246, 234, 317, 167, 231, 235, 285, 348, 68,
	203, 294, 136, 173, 149, 226, 229, 228, 220, 217,
	28, 252, 323, 219, 139, 253, 257, 264, 286, 314,
	210, 211, 288, 250, 33, 141, 318, 37, 157, 289,
	255, 249, 244, 129, 248, 209, 243, 41, 223, 259,
	258, 260, 284, 237, 168, 263, 239, 221, 238, 18,
	152, 155, 254, 256, 218, 170, 134, 159, 322, 290,
	216, 156, 171, 151, 293, 339, 166, 204, 287, 212,
	296, 40, 270, 230, 207, 222, 208, 138, 201, 164,
	241, 158, 224, 225, 247, 206, 242, 202, 160, 153,
	295, 271, 324, 240, 236, 232, 233, 165, 130, 162,
	163, 277, 278, 279, 280, 320, 291, 227, 272, 273,
	175, 176, 177, 178, 179, 180, 181, 34, 35, 127,
	114, 235, 120, 275, 128, 33, 159, -136, 127, -109,
	163, 277, 278, 279, 280, 59, 287, 286, 281, -127,
	202, -132, -132, -132, -132, -132, -2, -90, 17, 16,
	-5, -3, -233, 6, 21, 22, -34, 42, 43, -29,
	-40, 105, -41, -127, -60, 76, -65, 29, 59, -120,
	61, 24, -64, -61, -79, -224, -77, -78, 114, 115,
	103, 104, 111, 77, 116, -69, -67, -68, -70, -227,
	-121, 60, 69, 62, 63, 64, 65, 70, 71, 72,
	297, -75, -233, 46, 47, 308, 309, 310, 311, 315,
	312, 79, 36, 298, 306, 305, 304, 302, 303, 300,
	301, 347, 133, 299, 109, 307, 261, -107, -43, -44,
	-45, -46, -57, -78, -233, -55, 11, -50, -55, -99,
	-135, 202, -103, 287, 286, -122, 297, -101, -121, -119,
	285, 235, 284, 59, -120, 125, 183, 328, 75, 23,
	25, 268, 274, 182, 78, 114, 16, 79, 189, 337,
	338, 113, 308, 120, 50, 300, 301, 298, 187, 310,
	311, 299, 275, 194, 20, 29, 10, 26, 147, 22,
	107, 122, 184, 82, 83, 150, 24, 148, 72, 190,
	192, 19, 53, 140, 11, 327, 13, 14, 341, 329,
	133, 132, 94, 340, 128, 48, 8, 116, 27, 91,
	44, 145, 193, 46, 92, 17, 302, 303, 32, 315,
	154, 109, 51, 38, 342, 76, 343, 70, 54, 292,
	188, 74, 15, 49, 344, 142, 191, 93, 123, 307,
	47, 185, 345, 126, 186, 6, 313, 31, 146, 45,
	127, 276, 81, 131, 71, 161, 5, 144, 9, 52,
	55, 304, 305, 306, 36, 80, 12, 143, 319, 73,
	-171, -158, -121, 61, -203, 337, 338, 130, 130, -121,
	-115, 133, -115, -121, -121, -55, 127, -115, 307, 127,
	-55, -55, -114, 133, 59, -114, -114, -114, -55, 117,
	-55, 59, 31, 299, 59, 159, 127, 160, 130, -133,
	-233, -122, -133, -133, -133, 164, 165, -133, -110, 282,
	54, -133, -234, 58, -91, 19, 32, -41, -127, -87,
	-88, -41, -86, -2, -28, 38, -32, 22, 67, 11,
	-124, 75, 74, 91, -123, 23, -121, 61, 117, -41,
	-62, 94, 76, 92, 93, 78, 100, 99, 110, 103,
	104, 105, 106, 107, 108, 109, 101, 102, 113, 347,
	84, 85, 86, 87, 88, 89, 90, 95, 96, 97,
	98, -108, -233, -196, 347, -78, -233, 118, 119, -65,
	-65, -65, -65, -65, -65, -65, -228, 262, -233, 61,
	117, -2, -73, -41, -233, -233, -233, -233, -233, -233,
	-233, -233, -233, -82, -41, -233, -242, -233, -242, -242,
	-242, -242, -242, -242, -242, -138, 114, 235, 149, 226,
	-141, -140, 241, 240, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 234, 317, -233, -233, -233, -233,
	-56, 27, -55, 31, 57, -51, -53, -52, -54, 44,
	48, 50, 45, 46, 47, 51, -131, 23, -43, -233,
	-130, 155, -129, 23, -127, 61, -55, -50, -235, 57,
	11, 55, 57, -99, 202, -100, -104, 288, 290, 84,
	117, -126, -121, 61, 29, 31, 58, 57, -159, -139,
	-143, -140, -145, -144, -146, -121, -141, -142, 234, 317,
	231, 235, 232, 237, 238, 239, 114, 236, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 240,
	252, 31, 149, 224, 225, 226, 229, 228, 230, 227,
	253, 254, 255, 256, 257, 258, 259, 260, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 216, 217,
	219, 220, 221, 223, 222, -159, 128, -115, -115, -192,
	55, 59, 76, 59, 54, -210, 54, 19, 182, 183,
	23, -115, -55, -55, 292, -133, 131, -55, 24, 54,
	-55, 59, 59, -128, -127, -119, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -112, 276, 283, -55,
	9, 94, 57, 18, 117, 57, -89, 25, 26, -90,
	-234, -34, -66, -121, 62, 65, -33, 45, -55, -41,
	-41, -71, 70, 76, 71, 72, -123, 105, -128, -122,
	-119, -65, -72, -75, -78, 66, 94, 92, 93, 78,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -134, 59, 61, -143, 225,
	-138, -141, 216, 217, 219, 220, 221, 223, 222, 59,
	235, 225, 265, 116, 241, 250, 251, -64, 61, -121,
	-64, -121, 350, -39, 22, -73, -38, -41, -40, -122,
	-234, 57, -234, -2, -38, -38, -41, -41, -79, -65,
	-79, -121, -127, -38, -32, -80, -81, 80, -79, -234,
	233, -38, -39, -38, -38, -95, 155, -55, -98, -102,
	-79, -44, -45, -45, -44, -45, 44, 44, 44, 49,
	44, 49, 44, -52, -127, -234, -58, 52, 132, 53,
	-233, -129, -95, 55, -43, -55, -103, -100, 57, 289,
	291, 292, 54, 73, -41, -122, -150, 114, 113, -174,
	-238, 320, 35, -158, -160, -163, -161, -162, -175, -164,
	136, 134, 138, 139, 144, -168, 128, 145, 70, 76,
	-205, 136, -207, 54, 268, 274, 134, 145, 144, 348,
	68, 137, 327, 329, 29, 30, -153, 350, 262, -151,
	271, -147, 56, -147, -147, 233, -147, -147, -147, -147,
	-147, -149, 235, -149, -149, -149, -149, 56, 56, -147,
	-147, -147, -147, -155, 56, 218, -155, -155, -156, 56,
	-156, -121, 54, 199, -55, -55, -190, 319, -191, 59,
	-133, 24, -133, -55, -213, -211, 8, 9, 10, -55,
	-139, -55, -116, 125, 122, 123, -187, 121, 268, 235,
	68, 29, 15, 308, 155, 324, 59, 156, -55, -55,
	-55, -133, -111, 11, 94, 40, -41, -41, -128, -88,
	-91, -106, 19, 11, 36, 36, -38, 70, 71, 72,
	117, -233, -72, -65, -65, -65, -37, 150, 75, 319,
	-234, 233, -154, 319, 320, -229, -230, 61, -234, -38,
	-234, 57, -41, -234, -234, -234, 57, 55, 23, 57,
	11, 57, 57, 11, 117, -234, -38, -83, -81, 82,
	-41, -234, -234, -234, -234, -234, -63, 31, 36, -2,
	-233, -233, -59, 57, 12, 84, -48, -47, 54, 55,
	-49, 54, -47, 44, 44, -222, 319, 128, 128, 128,
	-96, -121, -59, -43, -59, -104, -105, 293, 290, 296,
	84, 59, -172, -122, 57, 34, 56, -204, 54, 76,
	-166, -121, 145, -168, -168, 59, -168, 59, 128, 59,
	70, 19, -121, 9, 145, 145, -204, 61, -55, -201,
	328, 16, 56, -206, 56, 61, 62, 63, 70, -148,
	69, -61, 263, -69, 298, 301, 300, 264, -121, -127,
	-208, 62, 351, -152, 272, 62, -149, -149, -147, -149,
	-149, -149, -150, 31, -150, -150, -150, -150, -157, 61,
	-157, -154, -154, 62, -155, 62, 54, 55, -55, -121,
	23, 23, -189, -188, -122, -194, 23, 54, 57, -210,
	55, -132, -125, 136, -240, 162, 135, 140, 139, 59,
	134, 138, 155, -193, 162, 135, 136, 140, 139, 59,
	128, 145, 134, 138, 155, 144, -117, -118, 131, 23,
	128, 145, 155, 125, -133, -113, 92, 12, -127, -127,
	41, 117, -55, -42, 11, 105, -122, -39, -37, 75,
	-65, -65, 224, 224, 224, 351, 57, -196, -234, -40,
	-137, 114, 231, 149, 226, 220, 250, 251, 237, 270,
	224, 271, -134, -137, -65, -65, -65, -65, -65, -122,
	316, -86, 83, -41, 81, -97, 54, -98, -74, -76,
	-75, -233, -2, -92, -121, -96, -86, -102, -41, -41,
	-41, 56, -41, 56, -233, -233, -233, -234, 57, -86,
	-59, 290, 294, 295, -41, 84, -122, -174, -179, -176,
	-121, 145, 10, 9, 19, 140, 134, 348, 59, 59,
	59, -203, 144, 339, -205, 348, -148, 264, -233, 56,
	23, 29, 62, -206, 56, -196, 347, -196, -233, -147,
	56, -147, 56, 56, 117, 58, -150, -150, -149, -150,
	-150, -150, 59, 114, 58, 57, 58, 57, 58, 57,
	-55, -121, 56, 54, -2, -2, 57, 84, -195, 19,
	170, 171, -55, -211, -213, -121, -239, 128, 145, -121,
	-132, -121, -132, -121, -55, -132, -121, 136, -163, 61,
	-41, -59, -43, -234, -65, 273, 273, 273, -230, -234,
	-147, -147, -147, -156, -147, 211, -147, 211, -234, -234,
	-234, 19, 57, -234, 57, 19, -233, -36, 313, -41,
	28, -97, 57, -234, -234, -234, 57, 117, -234, -90,
	-93, -121, 145, -221, -223, 341, 342, 343, 344, 345,
	346, -93, -93, -93, -130, -121, -90, -173, -122, 61,
	62, 58, 57, -147, -177, 266, -147, -165, 166, 167,
	31, 168, -165, 339, 145, 145, -233, -203, -204, -41,
	-93, 56, 329, 57, 58, -206, -121, 217, 235, 225,
	241, 250, -234, 58, 58, 58, -122, -150, -149, 61,
	-149, 62, 62, 56, 55, 54, -178, -179, -69, -121,
	-55, -188, -173, 131, 21, 6, 8, 9, 10, 19,
	23, -236, 56, -121, 144, 56, 27, -121, -84, 13,
	-149, 59, -65, -65, -65, -65, -65, -234, 61, 145,
	-76, 36, -2, -233, -121, -121, 57, 58, 58, 57,
	-234, -234, -234, -58, -181, -183, 319, -182, 55, 141,
	68, 175, 176, 177, 178, 179, 180, 181, -176, -89,
	-204, 54, 70, 169, -204, 54, -166, -121, -203, -41,
	-233, -234, 58, -41, 56, 62, 58, 218, -150, -150,
	58, 58, -178, -121, -55, 58, 56, 56, -167, -121,
	184, -214, -216, -7, -9, -8, -11, -10, -12, -13,
	-14, -3, 20, 188, 189, 194, 190, 143, 133, -237,
	-121, 103, 84, 61, -158, 57, 56, 56, -93, -233,
	134, -85, 14, 16, -234, -234, -234, -234, -35, 94,
	319, 9, -74, -2, 117, -121, -223, -222, -180, 54,
	-182, 319, 56, 321, 59, -169, 84, 61, 84, 84,
	84, 84, 84, 84, 84, 9, 10, 56, 56, -234,
	-41, -200, 168, 54, 58, -202, 58, 58, 58, 56,
	56, -94, 340, -178, -197, 57, 55, 185, -216, -86,
	-219, -121, -218, -121, -121, -121, -212, 38, 191, 192,
	193, -60, -65, -41, -60, 58, -237, -121, -237, -237,
	-237, -237, -237, -179, -179, 58, -185, -186, 155, 145,
	-41, -73, -234, 317, 51, 322, -98, -234, -121, -121,
	-184, -182, -121, 62, -209, 54, 73, 62, -209, -209,
	-209, -209, -209, -165, -165, -167, -179, -200, -234, 314,
	10, 9, 325, 326, 58, 201, 331, 332, 154, 333,
	168, 334, 335, -94, -178, -179, -59, 56, 58, -198,
	319, -121, -41, -217, -216, 200, -90, 57, -220, -139,
	186, -121, 11, 11, 11, 11, -216, 200, 81, 200,
	58, 58, -192, -234, 57, -121, 56, 41, 318, 323,
	-233, 58, 57, -204, -204, 58, 58, -200, -165, -165,
	319, 62, 16, 62, 62, 62, 62, 332, 154, 334,
	16, -59, 58, 58, -181, -93, -94, 348, -216, -91,
	-218, -121, 187, 27, -215, -216, -214, -215, -225, 195,
	76, -190, -186, 36, -179, 41, -121, -182, 137, -181,
	62, 62, 336, -127, -181, -59, -181, -180, 58, -59,
	-41, 349, 19, -121, 83, -216, 349, 83, -226, 196,
	195, 157, 58, 319, -234, -55, -180, 117, -180, -181,
	-181, 83, -2, 83, 82, 198, 197, 158, 322, 56,
	-122, -180, 133, 200, -233, 323, -167, -215, -65, 154,
	58, 83, -234, -234,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 774, 0, 506, 506, 506, 506, 506, 506, 0,
	-2, 829, 0, 0, 0, 0, -2, 496, 497, 0,
	499, 500, 1129, 1129, 1129, 1129, 1129, 0, 33, 34,
	1127, 1, 3, 782, 0, 0, 510, 513, 508, 861,
	829, 0, 0, 0, 84, 157, 390, 0, 0, 0,
	827, 827, 0, 0, 0, 0, 827, 144, 0, 0,
	0, 830, 0, 825, 0, 825, 825, 825, 0, 455,
	588, 850, 851, 852, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 0,
	0, 0, 0, 1130, 1130, 1130, 1130, 0, 1130, 484,
	473, 475, 476, 477, 478, 1130, 493, 494, 483, 495,
	498, 501, 502, 503, 504, 505, 27, 786, 861, 861,
	774, 29, 0, 506, 511, 512, 516, 514, 515, 507,
	0, 524, 528, 0, 598, 861, 603, 605, -2, -2,
	-2, 0, 644, 645, 646, 647, 648, 649, 861, 861,
	861, 861, 861, 861, 861, 676, 677, 678, 679, 0,
	753, 760, 761, 762, 763, 764, 765, 766, 607, 608,
	0, 806, 861, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 709, 709, 709, 709, 709, 709, 709,
	709, 0, 0, 0, 0, 0, 862, 0, 0, 535,
	537, 538, 539, 569, 0, 571, 0, 0, 41, 45,
	0, 1095, 810, -2, -2, 0, 0, 0, 848, 849,
	-2, 1004, -2, 846, 847, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	0, 158, 172, 172, 0, 391, 392, 827, 827, 145,
	0, 0, 0, 0, 0, 0, 827, 0, 154, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 454, 0,
	456, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 465,
	1131, 1132, 466, 467, 468, 1130, 1130, 470, 0, 485,
	0, 479, 28, 1128, 22, 0, 0, 783, 0, 775,
	776, 779, 782, 27, 513, 0, 518, 517, 509, 0,
	525, 861, 861, 0, 529, 0, 531, 532, 0, 601,
	861, 0, 0, 861, 861, 861, 861, 861, 861, 861,
	861, 861, 861, 861, 861, 861, 861, 861, 0, 0,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 604, 0, 758, 0, 618, 0, 0, 0, 667,
	668, 669, 670, 671, 672, 673, 680, 0, -2, 759,
	0, 27, 0, 642, 861, 861, 861, 861, 861, 861,
	0, 861, 516, 0, 745, 0, 700, 0, 701, 702,
	703, 704, 705, 706, 707, 708, 736, 0, 738, 739,
	740, 741, 742, 743, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 275, 276, 861, -2, 861, 861,
	43, 0, 587, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 579, 0, 0, 0, 0, 570, 0, 0,
	590, 1059, 572, 0, 574, 575, -2, 0, 0, 0,
	39, 40, 0, 46, 1095, 48, 73, 0, 0, 861,
	0, 330, 820, 821, 822, 818, 399, 0, 164, 324,
	320, 167, 168, 169, 170, 171, 310, 248, -2, -2,
	-2, -2, -2, -2, -2, -2, 310, -2, -2, -2,
	-2, -2, 327, -2, -2, -2, -2, -2, 296, -2,
	1019, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 165, 0, 0, 0, 148,
	0, 1130, 0, 1130, 0, 0, 0, 109, 110, 111,
	172, 0, 155, 0, 0, 421, 0, 449, 826, 0,
	1130, 452, 453, 589, 853, 854, 457, 458, 459, 460,
	461, 462, 463, 464, 469, 472, 486, 480, 481, 474,
	787, 0, 861, 861, 0, 861, 778, 780, 781, 786,
	30, 516, 0, 767, 0, 0, 861, 519, 25, 599,
	600, 602, 619, 0, 621, 623, 530, 526, 0, 754,
	-2, 609, 610, 638, 639, 640, 0, 861, 861, 861,
	636, 614, 0, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 664, 720, 721, 665, 0,
	675, 310, 312, 312, 312, 314, 314, 265, 266, 0,
	0, 317, 242, 243, 244, 245, 246, 662, 239, 0,
	663, 674, 0, 0, 861, 0, 521, 528, 522, 756,
	641, 861, 805, 27, 0, 0, 0, 0, 646, 0,
	0, 753, 0, 0, 861, 751, 748, 861, 0, 710,
	737, 0, 0, 0, 0, 0, 0, 586, 594, 807,
	0, 536, 565, 567, 0, 562, 577, 578, 580, 0,
	582, 0, 584, 585, 540, 541, 542, 0, 0, 0,
	0, 573, 594, 0, 594, 42, 811, 47, 0, 0,
	76, 77, 812, 813, 814, 0, 816, 331, 0, 156,
	401, 0, 404, 159, 160, 161, 162, 163, 0, 393,
	-2, 1064, 1085, 1022, 0, 0, 368, 369, 174, 0,
	176, 0, 178, 0, 180, 181, 0, 183, 185, 393,
	0, 0, 0, 0, 0, 0, 173, 0, 326, 322,
	321, 247, 0, 327, 327, 310, 327, 327, 327, 284,
	285, 330, 0, 330, 330, 330, 330, 0, 0, 317,
	317, 270, 272, 259, 0, 312, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 0, 92, 0, 146, 147,
	93, 828, 94, 130, 0, 115, 112, 113, 114, 0,
	98, 0, 1129, 143, 0, 841, 422, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 0, 0, 448,
	1130, 451, 489, 0, 0, 0, 784, 785, 0, 777,
	23, 0, 823, 824, 768, 769, 533, 620, 622, 624,
	0, -2, 611, 636, 615, 0, 612, 861, 861, 0,
	606, 240, 241, 0, 0, 0, 864, 239, 681, 0,
	684, 861, 643, -2, 685, 686, 0, 0, 0, 861,
	861, 861, 861, 861, 0, 0, 774, 0, 749, 861,
	0, 699, 711, 712, 713, 714, 799, 0, 0, -2,
	0, 0, 774, 0, 861, 861, 559, 566, 861, 0,
	560, 861, 561, 581, 583, 552, 0, 0, 0, 0,
	0, 557, 774, 594, 38, 74, 75, 0, 0, 81,
	861, 332, 0, 405, 399, 403, 0, 378, 0, 0,
	0, 396, 359, 0, 0, 362, 0, 364, -2, 390,
	175, 0, 0, 0, 182, 184, 0, 188, 189, 0,
	215, 0, 0, 199, 0, -2, 203, 204, 239, 206,
	207, 208, 1053, 212, 310, 310, 235, 1025, 0, 0,
	213, 214, 325, 166, 323, 0, 330, 330, 327, 330,
	330, 330, 286, 0, 287, 288, 289, 290, 0, 308,
	0, 268, 269, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 149, 150, 0, 133, 0, 0, 0, 0,
	0, 410, 0, 0, 1129, 0, 436, 437, 438, 439,
	440, 441, 442, 1129, 0, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 0, 1129, 842, 843,
	844, 845, 0, 0, 450, 471, 0, 861, 487, 488,
	788, 0, 24, 594, 0, 527, 755, 0, 613, 861,
	637, 616, 0, 0, 0, 863, 0, 866, 682, 523,
	0, 310, 310, 725, 310, 314, 728, 729, 310, 731,
	310, 734, 0, 0, 0, 0, 0, 0, 0, 754,
	0, 746, 698, 752, 861, 31, 0, 799, 789, 801,
	803, 861, 27, 0, 795, 0, 782, 808, 595, 809,
	563, 0, 568, 0, 0, 0, 0, 571, 0, 782,
	37, 78, 79, 80, 815, 0, 406, 402, 0, 372,
	310, 310, 0, 0, 0, 0, 0, 0, 360, 361,
	363, 366, 390, 198, 177, 393, 179, 0, 861, 0,
	0, 216, 0, 0, 0, 202, 0, 205, 0, 231,
	0, 233, 0, 0, 0, 311, 277, 278, 330, 279,
	280, 281, 328, 329, 327, 0, 327, 0, 315, 0,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	131, 132, 0, 116, 0, 100, 0, 434, 435, 0,
	415, 0, 416, 418, 419, 420, 0, 395, 414, 490,
	491, 770, 534, 683, 617, 666, 318, 319, 865, 687,
	722, 327, 726, 727, 730, 732, 733, 735, 689, 688,
	690, 861, 861, 693, 861, 861, 861, 0, 0, 750,
	0, 32, 0, 804, -2, 0, 0, 0, 44, 35,
	0, 554, 555, 0, 544, 546, 547, 548, 549, 550,
	551, 0, 0, 0, 590, 558, 36, 400, 407, 408,
	409, 334, 0, 779, 376, 377, 375, 393, 384, 385,
	0, 0, 393, 394, 395, 390, 861, 367, 0, 0,
	0, 861, 195, 0, 200, 0, 210, 1017, 1004, 317,
	244, 245, 209, 232, 234, 236, 0, 283, 330, 309,
	330, 0, 0, 0, 0, 0, 0, 370, 371, 310,
	0, 151, 152, 0, 134, 135, 136, 137, 138, 0,
	0, 99, 102, 0, 0, 0, 0, 396, 772, 0,
	723, 724, 0, 0, 0, 0, 715, 697, 747, 0,
	802, 0, -2, 0, 797, 796, 0, 564, 543, 0,
	591, 592, 593, 542, 356, 335, 0, 337, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	379, 0, 386, 387, 380, 0, 0, 396, 0, 0,
	861, 237, 190, 0, 217, 0, 0, 211, 298, 299,
	313, 316, 0, 0, 0, 596, 1127, 0, 139, 397,
	0, 97, 117, 119, 120, 121, 122, 123, 124, 125,
	126, 774, 0, 0, 0, 0, 61, 861, 861, 0,
	-2, 102, 102, -2, 102, 102, 0, 0, 0, 0,
	0, 26, 861, 861, 692, 691, 694, 695, 0, 0,
	0, 0, 792, 27, 0, 556, 545, 553, 333, 0,
	338, 0, 0, 0, 341, 0, 353, 343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 186, 0, 0, 0, 0, 197, 201, 596, 0,
	0, 594, 0, 0, 141, 0, 861, 0, 118, 782,
	49, -2, 51, 56, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 101, 103, -2, 104, 105,
	106, 107, 108, 0, 0, 145, 0, 444, 0, 0,
	773, 771, 696, 0, 0, 0, 800, -2, 798, 357,
	0, 339, 344, 342, 345, 354, 355, 346, 347, 348,
	349, 350, 351, 393, 393, 0, 0, 389, 237, 238,
	0, 0, 193, 194, 196, 0, 0, 0, 0, 0,
	0, 228, 0, 594, 0, 0, 334, 0, 596, 95,
	0, 398, 140, 96, 128, 0, 786, 0, 0, 53,
	55, 59, 62, 63, 64, 65, 66, 0, 0, 0,
	411, 855, 148, 443, 0, 0, 0, 716, 0, 719,
	0, 336, 0, 381, 382, 0, 334, 187, 191, 192,
	0, 219, 0, 221, 222, 223, 224, 225, 226, 227,
	0, 334, 594, 334, 356, 0, 594, 861, 0, 127,
	52, 172, 0, 0, 0, 68, 0, 0, 858, 856,
	0, 417, 445, 0, 0, 717, 0, 340, 0, 356,
	218, 220, 229, 0, 356, 334, 88, 86, 597, 334,
	142, 0, 0, 60, 67, 69, 0, 71, 413, 0,
	857, 0, 412, 0, 358, 0, 388, 0, 85, 89,
	356, 129, -2, 0, 0, 859, 860, 0, 0, 0,
	230, 87, 70, 0, 861, 718, 0, 0, 0, 0,
	383, 72, 446, 447,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 108, 100, 3,
	56, 58, 105, 103, 57, 104, 117, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 349,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 350, 3, 351, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:387
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:392
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:420
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:438
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:445
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:451
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:455
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:461
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:465
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:472
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:484
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:500
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:506
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:512
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:516
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:520
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:525
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:534
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:539
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:543
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:557
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:561
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:571
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:584
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:588
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:594
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:599
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:603
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:609
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:616
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:630
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:638
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:648
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:660
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:664
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:670
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:677
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:687
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:691
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:698
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:707
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:715
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:726
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:730
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:736
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:740
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:744
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:750
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:754
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:758
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:762
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:768
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:772
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:778
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:783
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:803
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:823
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:844
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:860
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:876
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:884
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:892
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:900
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:904
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:908
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:920
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:931
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:942
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:953
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:958
		{
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:959
		{
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:963
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:969
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:981
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1001
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1005
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1011
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1021
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1032
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1044
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1051
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1064
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1068
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1076
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1080
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1084
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1089
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1093
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1098
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1102
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1107
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1116
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1120
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1126
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1131
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1136
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1142
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1147
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1153
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1158
		{
			yyVAL.bytes = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1168
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1175
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1181
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1185
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1190
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1198
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1212
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1217
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1234
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1245
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1258
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1263
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1268
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1273
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1279
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1284
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1289
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1294
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1299
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1304
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1309
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1314
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1319
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1328
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1355
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1362
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1370
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1375
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1387
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1393
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1399
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1406
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1410
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1414
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1420
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1424
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1428
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1436
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1440
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1444
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1448
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1452
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1456
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1460
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1466
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1472
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1487
		{
			yyVAL.sequence = &Sequence{}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1491
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1496
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1501
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1511
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1516
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1521
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1526
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1536
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1541
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1546
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1551
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1558
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1562
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1566
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1574
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1583
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1587
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1592
		{
			yyVAL.bytes = nil
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1605
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1877
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1882
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1887
		{
			yyVAL.optVal = nil
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1891
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1912
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1934
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1948
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1957
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1961
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1965
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1970
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1974
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1978
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1983
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1987
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1991
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1997
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2002
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2006
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2010
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2016
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2020
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2026
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2030
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2036
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2040
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2045
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2049
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2053
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2057
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2061
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2065
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2069
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2073
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2077
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2087
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2097
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2103
		{
			yyVAL.indexPartition = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2107
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2111
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2117
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2165
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2170
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2176
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2180
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2186
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2191
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2195
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2205
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2210
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2217
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2224
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2231
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 383:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2240
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2252
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2256
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2260
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2264
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 388:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2270
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2281
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2291
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2295
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2299
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2305
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2309
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2314
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2321
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2325
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2332
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2336
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2346
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2351
		{
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2352
		{
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2356
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2360
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2366
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2370
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2374
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2380
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2384
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 412:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 413:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2412
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2431
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2444
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 417:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2448
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 418:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2461
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2471
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2476
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2481
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2485
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2517
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2523
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2527
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2533
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2537
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2543
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2549
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2557
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2562
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2570
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2574
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2580
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2589
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2644
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2652
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2662
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2670
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2686
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2702
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2706
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2712
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2716
		{
			yyVAL.str = "extended "
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2722
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2726
		{
			yyVAL.str = "full "
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2732
		{
			yyVAL.str = ""
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2740
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2746
		{
			yyVAL.showFilter = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2754
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2760
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2764
		{
			yyVAL.str = SessionStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2768
		{
			yyVAL.str = GlobalStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2774
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2778
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2784
		{
			yyVAL.statement = &Begin{}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2788
		{
			yyVAL.statement = &Begin{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2794
		{
			yyVAL.statement = &Commit{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2800
		{
			yyVAL.statement = &Rollback{}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2806
		{
			yyVAL.statement = &OtherRead{}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2810
		{
			yyVAL.statement = &OtherRead{}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2814
		{
			yyVAL.statement = &OtherRead{}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2818
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2822
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2827
		{
			setAllowComments(yylex, true)
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2831
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2837
		{
			yyVAL.bytes2 = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2841
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2847
		{
			yyVAL.str = UnionStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2851
		{
			yyVAL.str = UnionAllStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2855
		{
			yyVAL.str = UnionDistinctStr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2860
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2864
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2868
		{
			yyVAL.str = SQLCacheStr
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2877
		{
			yyVAL.str = DistinctStr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2882
		{
			yyVAL.str = ""
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			yyVAL.str = StraightJoinHint
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2891
		{
			yyVAL.selectExprs = nil
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2895
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2901
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2905
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2911
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2915
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2919
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2923
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2928
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2932
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2936
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2943
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2948
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2952
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2958
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2962
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2972
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2976
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2980
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2985
		{
			yyVAL.strs = []string{}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2989
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2995
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2999
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3031
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 553:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3035
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3041
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3050
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3056
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3060
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3073
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3077
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3081
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3085
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3091
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3093
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3097
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3103
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3105
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3113
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3117
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3121
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3128
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3134
		{
			yyVAL.str = JoinStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3138
		{
			yyVAL.str = JoinStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3142
		{
			yyVAL.str = JoinStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3148
		{
			yyVAL.str = StraightJoinStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3154
		{
			yyVAL.str = LeftJoinStr
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3158
		{
			yyVAL.str = LeftJoinStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3162
		{
			yyVAL.str = RightJoinStr
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3166
		{
			yyVAL.str = RightJoinStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3172
		{
			yyVAL.str = NaturalJoinStr
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3176
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3186
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3196
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3200
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3205
		{
			yyVAL.indexHints = nil
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3209
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3213
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3217
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3222
		{
			yyVAL.expr = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3226
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3231
		{
			yyVAL.columns = nil
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3235
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3241
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3245
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3249
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3253
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3257
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3261
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3265
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3271
		{
			yyVAL.str = ""
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3275
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3281
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3285
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3291
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3295
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3299
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3303
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3307
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3311
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3315
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3319
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3323
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3327
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3333
		{
			yyVAL.str = IsNullStr
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3337
		{
			yyVAL.str = IsNotNullStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3341
		{
			yyVAL.str = IsTrueStr
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3345
		{
			yyVAL.str = IsNotTrueStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3349
		{
			yyVAL.str = IsFalseStr
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3353
		{
			yyVAL.str = IsNotFalseStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3359
		{
			yyVAL.str = EqualStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3363
		{
			yyVAL.str = LessThanStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3367
		{
			yyVAL.str = GreaterThanStr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3371
		{
			yyVAL.str = LessEqualStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3375
		{
			yyVAL.str = GreaterEqualStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3379
		{
			yyVAL.str = NotEqualStr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3383
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3387
		{
			yyVAL.str = PosixRegexStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3391
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3395
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3399
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = nil
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3414
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3418
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3422
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3428
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3434
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3438
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3456
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3460
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3464
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3468
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3472
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3476
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3480
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3484
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3488
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3492
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3496
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3500
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3504
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3508
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3512
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3516
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3536
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3540
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3544
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3552
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3566
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3570
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3574
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3582
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3590
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3598
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3608
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 683:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3620
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 687:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3638
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3642
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3646
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 690:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3650
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 691:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3654
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 692:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3658
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 693:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3662
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 694:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 695:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 696:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3674
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 697:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3678
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3682
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3686
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3718
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3723
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3732
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3758
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3764
		{
			yyVAL.str = ""
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3768
		{
			yyVAL.str = BooleanModeStr
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3772
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 718:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3776
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3780
		{
			yyVAL.str = QueryExpansionStr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3786
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3790
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3872
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3876
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = nil
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3893
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3898
		{
			yyVAL.str = string("")
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3902
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3908
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3912
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3918
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3923
		{
			yyVAL.expr = nil
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3927
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3933
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3937
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3941
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3947
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3957
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3962
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3967
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3971
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3975
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3979
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3983
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3987
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3991
		{
			yyVAL.expr = &NullVal{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3997
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4006
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4010
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4015
		{
			yyVAL.exprs = nil
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4019
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4024
		{
			yyVAL.expr = nil
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4028
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4033
		{
			yyVAL.orderBy = nil
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4037
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4043
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4047
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4053
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4058
		{
			yyVAL.str = AscScr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.str = AscScr
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4066
		{
			yyVAL.str = DescScr
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4071
		{
			yyVAL.limit = nil
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4075
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4079
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4083
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4088
		{
			yyVAL.str = ""
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4092
		{
			yyVAL.str = ForUpdateStr
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4096
		{
			yyVAL.str = ShareModeStr
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4109
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4113
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4117
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4122
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4126
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 794:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4130
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4137
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4141
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4145
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 798:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4149
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4154
		{
			yyVAL.updateExprs = nil
		}
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4158
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4164
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4168
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4174
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4178
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4184
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4190
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4200
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4204
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4210
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4216
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4220
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4226
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4230
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4234
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4239
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4243
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4250
		{
			yyVAL.bytes = []byte("charset")
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4257
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4261
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4265
		{
			yyVAL.expr = &Default{}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4274
		{
			yyVAL.byt = 0
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4276
		{
			yyVAL.byt = 1
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4279
		{
			yyVAL.empty = struct{}{}
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4281
		{
			yyVAL.empty = struct{}{}
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4284
		{
			yyVAL.str = ""
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4286
		{
			yyVAL.str = IgnoreStr
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4290
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4292
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4294
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4296
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4298
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4300
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4302
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4304
		{
			yyVAL.empty = struct{}{}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4306
		{
			yyVAL.empty = struct{}{}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4308
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4311
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4313
		{
			yyVAL.empty = struct{}{}
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4315
		{
			yyVAL.empty = struct{}{}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4319
		{
			yyVAL.empty = struct{}{}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4321
		{
			yyVAL.empty = struct{}{}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4325
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4329
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4336
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4342
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4346
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4351
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4358
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4364
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4368
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4372
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4378
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4382
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4386
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4392
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4396
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4403
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4410
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4414
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4421
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4707
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4716
		{
			decNesting(yylex)
		}
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4721
		{
			forceEOF(yylex)
		}
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4726
		{
			forceEOF(yylex)
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4730
		{
			forceEOF(yylex)
		}
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4734
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
